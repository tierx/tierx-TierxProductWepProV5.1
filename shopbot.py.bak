import discord
from discord.ext import commands
from discord.ui import View, Button, Modal, TextInput
import json
import os
from datetime import datetime
from pathlib import Path
import re
from admin_examples import create_admin_examples_embed
from db_operations import load_countries, load_products, load_qrcode_url, load_thank_you_message, load_qrcode_url_async, save_qrcode_to_mongodb, load_thank_you_message_async, save_thank_you_message_to_mongodb

# ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Render.com
try:
    from render_helper import start_server_in_thread
except ImportError:
    # ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏°‡∏î‡∏π‡∏• ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏•‡πà‡∏≤
    def start_server_in_thread():
        pass

# Get the directory of the current script to ensure file paths are correct
SCRIPT_DIR = Path(__file__).parent.absolute()
PRODUCTS_FILE = SCRIPT_DIR / "products.json"
HISTORY_FILE = SCRIPT_DIR / "history.json"
CATEGORIES_DIR = SCRIPT_DIR / "categories"
QRCODE_CONFIG_FILE = SCRIPT_DIR / "qrcode_config.json"

# ‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
COUNTRIES_FILE = SCRIPT_DIR / "countries.json"  # ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå
try:
    with open(COUNTRIES_FILE, "r", encoding="utf-8") as f:
        country_data = json.load(f)
        COUNTRIES = country_data.get("countries", ["1", "2", "3", "4", "5"])
        COUNTRY_NAMES = country_data.get("country_names", {
            "1": "‡πÑ‡∏ó‡∏¢",
            "2": "‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô",
            "3": "‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤",
            "4": "‡πÄ‡∏Å‡∏≤‡∏´‡∏•‡∏µ",
            "5": "‡∏à‡∏µ‡∏ô"
        })
        # ‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
        COUNTRY_CODES = country_data.get("country_codes", {
            "thailand": "1",
            "japan": "2",
            "usa": "3",
            "korea": "4",
            "china": "5"
        })
except (FileNotFoundError, json.JSONDecodeError):
    # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    COUNTRIES = ["1", "2", "3", "4", "5"]  # ‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    COUNTRY_NAMES = {
        "1": "‡πÑ‡∏ó‡∏¢",
        "2": "‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô",
        "3": "‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤",
        "4": "‡πÄ‡∏Å‡∏≤‡∏´‡∏•‡∏µ",
        "5": "‡∏à‡∏µ‡∏ô"
    }
    COUNTRY_CODES = {
        "thailand": "1",
        "japan": "2",
        "usa": "3",
        "korea": "4",
        "china": "5"
    }
    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
    with open(COUNTRIES_FILE, "w", encoding="utf-8") as f:
        json.dump({
            "countries": COUNTRIES, 
            "country_names": COUNTRY_NAMES,
            "country_codes": COUNTRY_CODES
        }, f, ensure_ascii=False, indent=4)

# ‡∏´‡∏°‡∏ß‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏¢‡πà‡∏≠‡∏¢‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®)
CATEGORIES = ["money", "weapon", "item", "story", "car", "fashion", "rentcar"]
CATEGORY_NAMES = {
    "money": "‡πÄ‡∏á‡∏¥‡∏ô",
    "weapon": "‡∏≠‡∏≤‡∏ß‡∏∏‡∏ò",
    "item": "‡πÑ‡∏≠‡πÄ‡∏ó‡∏°",
    "story": "‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ",
    "car": "‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå",
    "fashion": "‡πÅ‡∏ü‡∏ä‡∏±‡πà‡∏ô",
    "rentcar": "‡πÄ‡∏ä‡πà‡∏≤‡∏£‡∏ñ"
}
# ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
CATEGORY_EMOJIS = {
    "money": "üíµ",
    "weapon": "üî´",
    "item": "üéÅ",
    "story": "ü§º",
    "car": "üöó",
    "fashion": "üëï",
    "rentcar": "üöô"
}

# ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
CATEGORIES_CONFIG_FILE = SCRIPT_DIR / "categories_config.json"

def save_categories():
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå"""
    with open(CATEGORIES_CONFIG_FILE, "w", encoding="utf-8") as f:
        json.dump({
            "categories": CATEGORIES, 
            "category_names": CATEGORY_NAMES,
            "category_emojis": CATEGORY_EMOJIS
        }, f, ensure_ascii=False, indent=4)
        
def load_categories():
    """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå"""
    global CATEGORIES, CATEGORY_NAMES, CATEGORY_EMOJIS
    try:
        with open(CATEGORIES_CONFIG_FILE, "r", encoding="utf-8") as f:
            config = json.load(f)
            CATEGORIES = config.get("categories", CATEGORIES)
            CATEGORY_NAMES = config.get("category_names", CATEGORY_NAMES)
            CATEGORY_EMOJIS = config.get("category_emojis", CATEGORY_EMOJIS)
    except (FileNotFoundError, json.JSONDecodeError):
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        save_categories()
        
def edit_category(category_code, new_emoji=None, new_name=None):
    """‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    
    Args:
        category_code (str): ‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç (‡πÄ‡∏ä‡πà‡∏ô money, weapon)
        new_emoji (str, optional): ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡πÉ‡∏´‡∏°‡πà
        new_name (str, optional): ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà
        
    Returns:
        bool: True ‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à, False ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
    """
    global CATEGORY_NAMES, CATEGORY_EMOJIS
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if category_code not in CATEGORIES:
        return False
    
    # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏
    if new_name:
        CATEGORY_NAMES[category_code] = new_name
    
    # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏
    if new_emoji:
        CATEGORY_EMOJIS[category_code] = new_emoji
    
    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
    save_categories()
    
    return True

# ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®
COUNTRY_EMOJIS = {
    "1": "üáπüá≠",  # ‡πÑ‡∏ó‡∏¢
    "2": "üáØüáµ",  # ‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô
    "3": "üá∫üá∏",  # ‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤
    "4": "üá∞üá∑",  # ‡πÄ‡∏Å‡∏≤‡∏´‡∏•‡∏µ
    "5": "üá®üá≥"   # ‡∏à‡∏µ‡∏ô
}

# Default QR code URL
DEFAULT_QRCODE_URL = "https://media.discordapp.net/attachments/1177559485137555456/1297159106787934249/QRCodeSCB.png?ex=6823d54f&is=682283cf&hm=10acdea9e554c0c107119f230b8a9122498dc5a240e4e24080f3fd7f204c9df9&format=webp&quality=lossless&width=760&height=760"

# Config functions for QR code and thank you message
THANK_YOU_CONFIG_FILE = SCRIPT_DIR / "thank_you_config.json"

# Default thank you message
DEFAULT_THANK_YOU_MESSAGE = (
    "ü©∑ ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏°‡∏≤‡∏Å‡πÜ‡∏£‡∏∞‡∏á‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏≠‡∏∏‡∏î‡∏´‡∏ô‡∏∏‡∏ô‡∏Å‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ô‡∏∞‡∏á‡∏±‡∏ö\n"
    "‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡∏ù‡∏≤‡∏Å‡∏Å‡∏î‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏£‡πâ‡∏≤‡∏ô <:a000:1300517458679037982> ‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πà‡∏≠‡∏¢‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°‡∏á‡∏±‡∏ö ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏°‡∏≤‡∏Å‡πÜ‡∏á‡∏±‡∏ö <a:tt03:1245427134093328417>\n"
    "‡∏Ñ‡∏•‡∏¥‡∏Å >>https://discordapp.com/channels/347710783930499073/1300512180638191657 <<"
)

def load_qrcode_url():
    """Load QR code URL from config file"""
    try:
        with open(QRCODE_CONFIG_FILE, "r", encoding="utf-8") as f:
            config = json.load(f)
            return config.get("url", DEFAULT_QRCODE_URL)
    except (FileNotFoundError, json.JSONDecodeError):
        # Create the default file if it doesn't exist
        save_qrcode_url(DEFAULT_QRCODE_URL)
        return DEFAULT_QRCODE_URL

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏à‡∏≤‡∏Å db_operations
async def load_qrcode_url_async_local():
    """Load QR code URL from MongoDB or fall back to config file (async version)"""
    from db_operations import load_qrcode_url_async
    return await load_qrcode_url_async()

def save_qrcode_url(url):
    """Save QR code URL to config file"""
    with open(QRCODE_CONFIG_FILE, "w", encoding="utf-8") as f:
        json.dump({"url": url}, f, ensure_ascii=False, indent=2)
        
def load_thank_you_message():
    """Load thank you message from config file"""
    try:
        with open(THANK_YOU_CONFIG_FILE, "r", encoding="utf-8") as f:
            config = json.load(f)
            return config.get("message", DEFAULT_THANK_YOU_MESSAGE)
    except (FileNotFoundError, json.JSONDecodeError):
        # Create the default file if it doesn't exist
        save_thank_you_message(DEFAULT_THANK_YOU_MESSAGE)
        return DEFAULT_THANK_YOU_MESSAGE

def save_thank_you_message(message):
    """Save thank you message to config file"""
    with open(THANK_YOU_CONFIG_FILE, "w", encoding="utf-8") as f:
        json.dump({"message": message}, f, ensure_ascii=False, indent=2)

def save_countries():
    """Save country data to the JSON file"""
    with open(COUNTRIES_FILE, "w", encoding="utf-8") as f:
        json.dump({
            "countries": COUNTRIES, 
            "country_names": COUNTRY_NAMES,
            "country_codes": COUNTRY_CODES,
            "country_emojis": COUNTRY_EMOJIS
        }, f, ensure_ascii=False, indent=4)

def add_country(code, name):
    """Add a new country to the system
    
    Args:
        code (str): Country code (e.g., 'korea', 'china')
        name (str): Country name in Thai (e.g., '‡πÄ‡∏Å‡∏≤‡∏´‡∏•‡∏µ', '‡∏à‡∏µ‡∏ô')
    
    Returns:
        bool or tuple: True if successful, or (False, error_message) if failed with error message
    """
    global COUNTRIES, COUNTRY_NAMES
    
    # Convert code to lowercase for consistency
    code = code.lower()
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if code in COUNTRIES:
        return (False, f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® `{code}` ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÄ‡∏Å‡∏¥‡∏ô 5 ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if len(COUNTRIES) >= 5:
        return (False, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏Ñ‡∏∑‡∏≠ 5 ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®")
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÉ‡∏´‡∏°‡πà
    COUNTRIES.append(code)
    COUNTRY_NAMES[code] = name
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÉ‡∏´‡∏°‡πà
    country_dir = CATEGORIES_DIR / code
    country_dir.mkdir(exist_ok=True)
    
    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
    save_countries()
    
    return True

def edit_country(code, new_name=None, new_emoji=None):
    """Edit a country's name and/or emoji
    
    Args:
        code (str): Country code to edit
        new_name (str, optional): New name for the country
        new_emoji (str, optional): New emoji for the country
    
    Returns:
        bool: True if successful, False if country doesn't exist
    """
    global COUNTRY_NAMES, COUNTRY_EMOJIS
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if code not in COUNTRIES:
        return False
    
    # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏
    if new_name:
        COUNTRY_NAMES[code] = new_name
    
    # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏
    if new_emoji:
        COUNTRY_EMOJIS[code] = new_emoji
    
    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
    save_countries()
    
    return True

def remove_country(code):
    """Remove a country and all its products
    
    Args:
        code (str): Country code to remove
    
    Returns:
        bool or tuple: True if successful, or (False, error_message) if failed with error message
    """
    global COUNTRIES, COUNTRY_NAMES
    
    # Convert code to lowercase for consistency
    code = code.lower()
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if code not in COUNTRIES:
        return (False, f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® `{code}` ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
    
    # ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏´‡∏•‡∏±‡∏Å (1, 2, 3)
    if code in ["1", "2", "3"] or code in ["thailand", "japan", "usa"]:
        main_country = code
        if code in COUNTRY_CODES:
            main_country = COUNTRY_CODES[code]
        return (False, f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® `{COUNTRY_NAMES.get(main_country, code)}` ‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® (‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 3 ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®)
    if len(COUNTRIES) <= 3:
        return (False, f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 3 ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö (‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏°‡∏µ {len(COUNTRIES)} ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®)")
    
    # ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    numeric_code = code
    if code in COUNTRY_CODES:
        numeric_code = COUNTRY_CODES[code]
        
    # ‡∏•‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ô‡∏µ‡πâ
    country_dir = CATEGORIES_DIR / numeric_code
    if country_dir.exists():
        for file in country_dir.glob("*.json"):
            file.unlink()  # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå
        try:
            country_dir.rmdir()  # ‡∏•‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå (‡∏ï‡πâ‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤)
        except OSError:
            pass  # ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ‡∏ñ‡πâ‡∏≤‡∏•‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ (‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà .json)
    
    # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏•‡∏¥‡∏™‡∏ï‡πå‡πÅ‡∏•‡∏∞‡∏î‡∏¥‡∏Å‡∏ä‡∏±‡∏ô‡∏ô‡∏≤‡∏£‡∏µ
    if numeric_code in COUNTRIES:
        COUNTRIES.remove(numeric_code)
    if numeric_code in COUNTRY_NAMES:
        del COUNTRY_NAMES[numeric_code]
    # ‡∏•‡∏ö‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏Å‡πà‡∏≤‡∏à‡∏≤‡∏Å COUNTRY_CODES ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    inv_country_codes = {v: k for k, v in COUNTRY_CODES.items()}
    if numeric_code in inv_country_codes:
        old_code = inv_country_codes[numeric_code]
        if old_code in COUNTRY_CODES:
            del COUNTRY_CODES[old_code]
    
    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
    save_countries()
    
    return True

# Setup bot with necessary intents
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix="!", intents=intents, help_command=None)

def load_products(country=None, category=None):
    """Load product data from the JSON file based on country and category
    
    Args:
        country (str, optional): Country code (1, 2, 3, 4, 5) or legacy code (thailand, japan, usa). Defaults to None.
        category (str, optional): Category code (money, weapon, etc). Defaults to None.
        
    Returns:
        list: List of products matching the criteria
    """
    # ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏´‡∏±‡∏™‡πÉ‡∏´‡∏°‡πà (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç) ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    if country and country in COUNTRY_CODES:
        country = COUNTRY_CODES[country]
    
    # ‡∏ñ‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ó‡∏±‡πâ‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
    if country and category:
        if country in COUNTRIES and category in CATEGORIES:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏≤‡∏ò‡πÑ‡∏ü‡∏•‡πå: categories/[country]/[category].json
            category_file = CATEGORIES_DIR / country / f"{category}.json"
            try:
                with open(category_file, "r", encoding="utf-8") as f:
                    products = json.load(f)
                    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏´‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
                    for product in products:
                        product["country"] = country
                        product["category"] = category
                    return products
            except FileNotFoundError:
                print(f"Category file not found at {category_file}, creating empty category file")
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
                country_dir = CATEGORIES_DIR / country
                country_dir.mkdir(exist_ok=True)
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏õ‡∏•‡πà‡∏≤
                with open(category_file, "w", encoding="utf-8") as f:
                    json.dump([], f, ensure_ascii=False, indent=2)
                return []
            except json.JSONDecodeError:
                print(f"Invalid JSON in category file at {category_file}, falling back to main products file")
                return []
    
    # ‡∏ñ‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÅ‡∏Ñ‡πà‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡∏´‡∏°‡∏ß‡∏î‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ô‡∏±‡πâ‡∏ô
    elif country and country in COUNTRIES:
        all_products = []
        country_dir = CATEGORIES_DIR / country
        country_dir.mkdir(exist_ok=True)  # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
        
        # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏≠‡πà‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®
        for category in CATEGORIES:
            category_file = country_dir / f"{category}.json"
            try:
                with open(category_file, "r", encoding="utf-8") as f:
                    products = json.load(f)
                    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏´‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
                    for product in products:
                        product["country"] = country
                        product["category"] = category
                    all_products.extend(products)
            except (FileNotFoundError, json.JSONDecodeError):
                # ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                continue
        
        return all_products
    
    # ‡∏ñ‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÅ‡∏Ñ‡πà‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏ô‡∏±‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®
    elif category and category in CATEGORIES:
        all_products = []
        
        # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®
        for country in COUNTRIES:
            country_dir = CATEGORIES_DIR / country
            country_dir.mkdir(exist_ok=True)
            
            category_file = country_dir / f"{category}.json"
            try:
                with open(category_file, "r", encoding="utf-8") as f:
                    products = json.load(f)
                    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏´‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
                    for product in products:
                        product["country"] = country
                        product["category"] = category
                    all_products.extend(products)
            except (FileNotFoundError, json.JSONDecodeError):
                # ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                continue
        
        return all_products
    
    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏•‡∏¢ ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    else:
        all_products = []
        
        # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÅ‡∏•‡∏∞‡∏ó‡∏∏‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
        for country in COUNTRIES:
            country_dir = CATEGORIES_DIR / country
            country_dir.mkdir(exist_ok=True)
            
            for category in CATEGORIES:
                category_file = country_dir / f"{category}.json"
                try:
                    with open(category_file, "r", encoding="utf-8") as f:
                        products = json.load(f)
                        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏´‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
                        for product in products:
                            product["country"] = country
                            product["category"] = category
                        all_products.extend(products)
                except (FileNotFoundError, json.JSONDecodeError):
                    # ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                    continue
        
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà ‡∏•‡∏≠‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏î‡∏¥‡∏° (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤)
        if not all_products:
            try:
                with open(PRODUCTS_FILE, "r", encoding="utf-8") as f:
                    legacy_products = json.load(f)
                    return legacy_products
            except (FileNotFoundError, json.JSONDecodeError):
                return []
        
        return all_products

def save_products(products, country=None, category=None):
    """Save product data to the JSON file or category file"""
    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏™‡∏°‡∏≠ (backward compatibility)
    with open(PRODUCTS_FILE, "w", encoding="utf-8") as f:
        json.dump(products, f, ensure_ascii=False, indent=2)
    
    # ‡∏ñ‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ó‡∏±‡πâ‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏ô‡∏±‡πâ‡∏ô
    if country and category:
        if country in COUNTRIES and category in CATEGORIES:
            # ‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
            filtered_products = [p for p in products if p.get("country") == country and p.get("category") == category]
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå
            country_dir = CATEGORIES_DIR / country
            country_dir.mkdir(exist_ok=True)
            
            category_file = country_dir / f"{category}.json"
            with open(category_file, "w", encoding="utf-8") as f:
                # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• country ‡πÅ‡∏•‡∏∞ category ‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡∏°‡∏ß‡∏î (‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏ã‡πâ‡∏≥)
                clean_products = []
                for product in filtered_products:
                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á copy ‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
                    clean_product = product.copy()
                    if "country" in clean_product:
                        del clean_product["country"]
                    if "category" in clean_product:
                        del clean_product["category"]
                    clean_products.append(clean_product)
                
                json.dump(clean_products, f, ensure_ascii=False, indent=2)
    
    # ‡∏ñ‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÅ‡∏Ñ‡πà‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏∏‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ô‡∏±‡πâ‡∏ô
    elif country and country in COUNTRIES:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®
        country_dir = CATEGORIES_DIR / country
        country_dir.mkdir(exist_ok=True)
        
        # ‡πÅ‡∏¢‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        for category in CATEGORIES:
            # ‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ô‡∏µ‡πâ
            category_products = [p for p in products if p.get("country") == country and p.get("category") == category]
            
            # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
            if category_products:
                category_file = country_dir / f"{category}.json"
                with open(category_file, "w", encoding="utf-8") as f:
                    # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• country ‡πÅ‡∏•‡∏∞ category ‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
                    clean_products = []
                    for product in category_products:
                        clean_product = product.copy()
                        if "country" in clean_product:
                            del clean_product["country"]
                        if "category" in clean_product:
                            del clean_product["category"]
                        clean_products.append(clean_product)
                    
                    json.dump(clean_products, f, ensure_ascii=False, indent=2)
    
    # ‡∏ñ‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÅ‡∏Ñ‡πà‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏ô‡∏±‡πâ‡∏ô‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®
    elif category and category in CATEGORIES:
        for country in COUNTRIES:
            # ‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ô‡∏µ‡πâ
            country_products = [p for p in products if p.get("country") == country and p.get("category") == category]
            
            # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
            if country_products:
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®
                country_dir = CATEGORIES_DIR / country
                country_dir.mkdir(exist_ok=True)
                
                category_file = country_dir / f"{category}.json"
                with open(category_file, "w", encoding="utf-8") as f:
                    # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• country ‡πÅ‡∏•‡∏∞ category ‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
                    clean_products = []
                    for product in country_products:
                        clean_product = product.copy()
                        if "country" in clean_product:
                            del clean_product["country"]
                        if "category" in clean_product:
                            del clean_product["category"]
                        clean_products.append(clean_product)
                    
                    json.dump(clean_products, f, ensure_ascii=False, indent=2)
    
    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏•‡∏¢ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏∏‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
    else:
        # ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
        for country in COUNTRIES:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®
            country_dir = CATEGORIES_DIR / country
            country_dir.mkdir(exist_ok=True)
            
            for category in CATEGORIES:
                # ‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ô‡∏µ‡πâ
                filtered_products = [p for p in products if p.get("country") == country and p.get("category") == category]
                
                # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
                if filtered_products:
                    category_file = country_dir / f"{category}.json"
                    with open(category_file, "w", encoding="utf-8") as f:
                        # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• country ‡πÅ‡∏•‡∏∞ category ‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
                        clean_products = []
                        for product in filtered_products:
                            clean_product = product.copy()
                            if "country" in clean_product:
                                del clean_product["country"]
                            if "category" in clean_product:
                                del clean_product["category"]
                            clean_products.append(clean_product)
                        
                        json.dump(clean_products, f, ensure_ascii=False, indent=2)
            
def save_product_to_category(product):
    """Save a single product to its category file
    
    Args:
        product: A product dictionary with country, category, name, price, and emoji
    """
    country = product.get("country", "thailand")  # Default to Thailand if no country specified
    category = product.get("category")
    
    # Check if country and category are valid
    if country in COUNTRIES and category in CATEGORIES:
        # Ensure country directory exists
        country_dir = CATEGORIES_DIR / country
        country_dir.mkdir(exist_ok=True)
        
        # Set path to category file
        category_file = country_dir / f"{category}.json"
        
        try:
            # Try to read existing products from the category file
            with open(category_file, "r", encoding="utf-8") as f:
                category_products = json.load(f)
                
            # Remove product with same name if exists
            category_products = [p for p in category_products if p.get("name") != product.get("name")]
            
            # Create a clean version of the product without country and category
            clean_product = product.copy()
            if "country" in clean_product:
                del clean_product["country"]
            if "category" in clean_product:
                del clean_product["category"]
            
            # Add the clean product
            category_products.append(clean_product)
            
            # Save back to category file
            with open(category_file, "w", encoding="utf-8") as f:
                json.dump(category_products, f, ensure_ascii=False, indent=2)
                
        except (FileNotFoundError, json.JSONDecodeError):
            # Create a clean version of the product without country and category
            clean_product = product.copy()
            if "country" in clean_product:
                del clean_product["country"]
            if "category" in clean_product:
                del clean_product["category"]
                
            # Create new category file with the single product
            with open(category_file, "w", encoding="utf-8") as f:
                json.dump([clean_product], f, ensure_ascii=False, indent=2)

def log_purchase(user, items, total_price):
    """Log purchase history to the JSON file"""
    # Create the history file if it doesn't exist
    if not HISTORY_FILE.exists():
        HISTORY_FILE.touch()
        
    with open(HISTORY_FILE, "a", encoding="utf-8") as f:
        data = {
            "user": str(user),
            "items": items,
            "total": total_price,
            "timestamp": datetime.now().isoformat()
        }
        f.write(json.dumps(data, ensure_ascii=False) + "\n")

def clear_category_products(category, country=None):
    """Delete all products in a specific category
    
    Args:
        category (str): Category name to clear
        country (str, optional): Country name to clear. If None, clears the category in all countries.
    
    Returns:
        bool: True if successful, False otherwise
    """
    if category in CATEGORIES:
        # ‡∏ñ‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® ‡∏•‡πâ‡∏≤‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡∏°‡∏ß‡∏î‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ô‡∏±‡πâ‡∏ô
        if country and country in COUNTRIES:
            # ‡∏•‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
            country_dir = CATEGORIES_DIR / country
            category_file = country_dir / f"{category}.json"
            
            # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏±‡∏ö
            if category_file.exists():
                with open(category_file, "w", encoding="utf-8") as f:
                    json.dump([], f, ensure_ascii=False, indent=2)
            
            # ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å
            all_products = []
            try:
                with open(PRODUCTS_FILE, "r", encoding="utf-8") as f:
                    all_products = json.load(f)
            except (FileNotFoundError, json.JSONDecodeError):
                pass
            
            # ‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö
            filtered_products = [p for p in all_products 
                                 if not (p.get("country") == country and p.get("category") == category)]
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å
            with open(PRODUCTS_FILE, "w", encoding="utf-8") as f:
                json.dump(filtered_products, f, ensure_ascii=False, indent=2)
                
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® ‡∏•‡πâ‡∏≤‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®
        else:
            for country in COUNTRIES:
                country_dir = CATEGORIES_DIR / country
                category_file = country_dir / f"{category}.json"
                
                # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏±‡∏ö
                if category_file.exists():
                    with open(category_file, "w", encoding="utf-8") as f:
                        json.dump([], f, ensure_ascii=False, indent=2)
            
            # ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å
            all_products = []
            try:
                with open(PRODUCTS_FILE, "r", encoding="utf-8") as f:
                    all_products = json.load(f)
            except (FileNotFoundError, json.JSONDecodeError):
                pass
            
            # ‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏≠‡∏∑‡πà‡∏ô‡∏≠‡∏≠‡∏Å (‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö)
            filtered_products = [p for p in all_products if p.get("category") != category]
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å
            with open(PRODUCTS_FILE, "w", encoding="utf-8") as f:
                json.dump(filtered_products, f, ensure_ascii=False, indent=2)
                
        return True
    return False

def delete_all_products():
    """Delete all products from all categories in all countries completely"""
    
    # ‡∏•‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏∏‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÇ‡∏î‡∏¢‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
    for country in COUNTRIES:
        country_dir = CATEGORIES_DIR / country
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
        country_dir.mkdir(exist_ok=True)
        
        # ‡∏•‡πâ‡∏≤‡∏á‡∏ó‡∏∏‡∏Å‡∏´‡∏°‡∏ß‡∏î‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ô‡∏µ‡πâ
        for category in CATEGORIES:
            category_file = country_dir / f"{category}.json"
            
            # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡πà‡∏≤‡∏á‡∏•‡∏á‡πÑ‡∏õ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå
            with open(category_file, "w", encoding="utf-8") as f:
                json.dump([], f, ensure_ascii=False, indent=2)
    
    # ‡∏•‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å
    with open(PRODUCTS_FILE, "w", encoding="utf-8") as f:
        json.dump([], f, ensure_ascii=False, indent=2)
    
    # ‡∏•‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏î‡∏¥‡∏° (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤)
    old_categories = ["money.json", "weapon.json", "item.json", "car.json", "fashion.json", "rentcar.json"]
    for filename in old_categories:
        category_file = CATEGORIES_DIR / filename
        if category_file.exists():
            # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡πà‡∏≤‡∏á‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤
            with open(category_file, "w", encoding="utf-8") as f:
                json.dump([], f, ensure_ascii=False, indent=2)
        
    return True

def add_no_product_placeholders():
    """Add '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤' placeholder to empty categories in all countries
    
    This function only adds the placeholder product to categories that are completely empty.
    """
    added_count = 0
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ placeholder ‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    for country in COUNTRIES:
        country_dir = CATEGORIES_DIR / country
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
        country_dir.mkdir(exist_ok=True)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å‡∏´‡∏°‡∏ß‡∏î‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ô‡∏µ‡πâ
        for category in CATEGORIES:
            category_file = country_dir / f"{category}.json"
            
            # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
            if category_file.exists():
                try:
                    with open(category_file, "r", encoding="utf-8") as f:
                        products = json.load(f)
                except (json.JSONDecodeError, FileNotFoundError):
                    products = []
            else:
                products = []
                
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ placeholder ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏ô‡∏µ‡πâ
            if not products:
                products.append({
                    "name": "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
                    "price": 0,
                    "emoji": "‚ùå",
                    "category": category,
                    "country": country
                })
                
                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏•‡πå
                with open(category_file, "w", encoding="utf-8") as f:
                    json.dump(products, f, ensure_ascii=False, indent=2)
                    
                added_count += 1
    
    # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏î‡∏¥‡∏°
    old_categories = ["money.json", "weapon.json", "item.json", "car.json", "fashion.json", "rentcar.json"]
    for filename in old_categories:
        category_file = CATEGORIES_DIR / filename
        category_name = filename.replace(".json", "")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏°
        if category_file.exists():
            try:
                with open(category_file, "r", encoding="utf-8") as f:
                    products = json.load(f)
            except (json.JSONDecodeError, FileNotFoundError):
                products = []
                
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ placeholder ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏ô‡∏µ‡πâ
            if not products:
                products.append({
                    "name": "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
                    "price": 0,
                    "emoji": "‚ùå",
                    "category": category_name
                })
                
                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏•‡πå
                with open(category_file, "w", encoding="utf-8") as f:
                    json.dump(products, f, ensure_ascii=False, indent=2)
                    
                added_count += 1
                
    return added_count

def batch_add_products(products_data):
    """Add multiple products at once
    
    products_data should be a list of dictionaries with the following keys:
    - name: str
    - price: float
    - emoji: str
    - category: str
    """
    if not products_data or not isinstance(products_data, list):
        return False, "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"
    
    added_count = 0
    errors = []
    
    # ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
    products_by_country_category = {}
    
    # Load current products (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ã‡πâ‡∏≥)
    all_products = load_products()
    
    # Create a set of existing product names for quick lookup
    existing_names = {p["name"] for p in all_products}
    
    for product in products_data:
        # Check if all required fields are present
        if not all(key in product for key in ["name", "price", "emoji", "category"]):
            errors.append(f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô: {product}")
            continue
            
        # Check if product already exists
        if product["name"] in existing_names:
            errors.append(f"‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ '{product['name']}' ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
            continue
            
        # Validate category
        if product["category"] not in ["money", "weapon", "item", "car", "fashion", "rentcar"]:
            errors.append(f"‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà '{product['category']}' ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ '{product['name']}'")
            continue
        
        # Add to existing names to prevent duplicates in the same batch
        existing_names.add(product["name"])
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        country = product.get("country", "1")  # Default to "1" (Thailand) if no country
        category = product["category"]
        
        # ‡∏ñ‡πâ‡∏≤‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        if country in COUNTRIES and category in CATEGORIES:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏µ‡∏¢‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°
            key = (country, category)
            if key not in products_by_country_category:
                products_by_country_category[key] = []
            products_by_country_category[key].append(product)
            added_count += 1
    
    # Only save if we added anything
    if added_count > 0:
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
        for (country, category), products in products_by_country_category.items():
            # ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ô‡∏µ‡πâ
            existing_category_products = load_products(country, category)
            
            # Remove products with the same name that we're going to add
            product_names_to_add = {p["name"] for p in products}
            existing_category_products = [p for p in existing_category_products 
                                         if p.get("name") not in product_names_to_add]
            
            # Add new products
            existing_category_products.extend(products)
            
            # Save just the category file
            save_products(existing_category_products, country, category)
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡∏á‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å‡∏î‡πâ‡∏ß‡∏¢ (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)
            for product in products:
                # Save each product individually to the appropriate category file
                save_product_to_category(product)
    
    # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
    if added_count > 0:
        return True, f"‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {added_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß" + (f" ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î {len(errors)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: {', '.join(errors)}" if errors else "")
    else:
        return False, f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ: {', '.join(errors)}"

class QuantityModal(Modal):
    """Modal for entering product quantity"""
    def __init__(self, product_index, product):
        super().__init__(title=f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {product['name']}")
        self.product_index = product_index
        self.product = product
        self.quantity = None
        
        # Create text input for quantity
        self.quantity_input = TextInput(
            label=f"‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {product['name']} ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£",
            placeholder="‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô",
            required=True,
            min_length=1,
            max_length=3,
            default="1"
        )
        self.add_item(self.quantity_input)
    
    async def on_submit(self, interaction: discord.Interaction):
        try:
            # Convert input to integer
            quantity = int(self.quantity_input.value)
            if quantity < 0:
                await interaction.response.send_message("‚ùå ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö 0", ephemeral=True)
                return
            elif quantity > 100:
                await interaction.response.send_message("‚ùå ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 100", ephemeral=True)
                return
                
            self.quantity = quantity
            await interaction.response.defer()
        except ValueError:
            await interaction.response.send_message("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô", ephemeral=True)

class PageIndicatorButton(Button):
    """Button that shows current page (disabled - cannot be clicked)"""
    def __init__(self, page, total_pages, row=0, view=None):
        self.page = page
        self.total_pages = total_pages
        self.parent_view = view
        super().__init__(
            label=f"‡∏´‡∏ô‡πâ‡∏≤ {page + 1}/{total_pages}",
            style=discord.ButtonStyle.secondary,
            disabled=True,  # Set button to disabled/non-clickable
            row=row
        )

class PageInputModal(Modal):
    """Modal for entering page number"""
    def __init__(self, view, total_pages=1):
        self.view = view
        self.total_pages = total_pages
        super().__init__(title=f"‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ (1-{total_pages})")
        
        self.page_number = TextInput(
            label=f"‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤ (1-{total_pages})",
            placeholder="‡πÄ‡∏ä‡πà‡∏ô 1, 2, 3",
            min_length=1,
            max_length=3,
            required=True
        )
        self.add_item(self.page_number)
    
    async def on_submit(self, interaction: discord.Interaction):
        try:
            page_number = int(self.page_number.value)
            if hasattr(self.view, 'go_to_page'):
                await self.view.go_to_page(interaction, page_number)
            else:
                # Fallback if go_to_page is not available
                await interaction.response.send_message(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ {page_number}", ephemeral=True)
        except ValueError:
            await interaction.response.send_message("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô", ephemeral=True)
        except Exception as e:
            await interaction.response.send_message(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}", ephemeral=True)

class MultiCategoryView(View):
    """View for selecting multiple categories"""
    def __init__(self):
        super().__init__(timeout=None)
        self.selected_categories = []
        
        # Add category buttons with toggleable state
        categories = [
            ("money", "‡πÄ‡∏á‡∏¥‡∏ô", "üí∞", 0),
            ("weapon", "‡∏≠‡∏≤‡∏ß‡∏∏‡∏ò", "üî´", 0),
            ("item", "‡πÑ‡∏≠‡πÄ‡∏ó‡∏°", "üß™", 0),
            ("car", "‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå", "üöó", 1),
            ("fashion", "‡πÅ‡∏ü‡∏ä‡∏±‡πà‡∏ô", "üëí", 1),
            ("rentcar", "‡πÄ‡∏ä‡πà‡∏≤‡∏£‡∏ñ", "üöô", 1)
        ]
        
        for cat_id, label, emoji, row in categories:
            self.add_item(MultiCategoryButton(cat_id, label, emoji, row))
            
        # Add confirm button to view selected categories
        self.add_item(ViewSelectedCategoriesButton())

class MultiCategoryButton(Button):
    """Button for category selection with toggle state"""
    def __init__(self, category, label, emoji, row=0):
        self.category = category
        self.is_selected = False
        super().__init__(
            label=label, 
            emoji=emoji,
            style=discord.ButtonStyle.secondary,
            custom_id=f"category_{category}",
            row=row
        )
    
    async def callback(self, interaction: discord.Interaction):
        view: MultiCategoryView = self.view
        
        # Toggle selection state
        self.is_selected = not self.is_selected
        
        # Update button style based on selection
        if self.is_selected:
            self.style = discord.ButtonStyle.success
            if self.category not in view.selected_categories:
                view.selected_categories.append(self.category)
        else:
            self.style = discord.ButtonStyle.secondary
            if self.category in view.selected_categories:
                view.selected_categories.remove(self.category)
        
        # Update message with current selections
        selected_text = ", ".join([f"`{cat}`" for cat in view.selected_categories]) if view.selected_categories else "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"
        
        # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "‡∏Å‡∏≤‡∏£‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß"
        await interaction.response.defer()
        
        # ‡πÉ‡∏ä‡πâ message.edit ‡πÅ‡∏ó‡∏ô response.edit_message ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏î‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÑ‡∏î‡πâ
        await interaction.message.edit(
            content=f"üìã ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å/‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å):\n‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: {selected_text}", 
            view=view
        )

class CategoryNavButton(Button):
    """Button to navigate between categories in the shop view"""
    def __init__(self, category, is_active=False, row=0, country="thailand"):
        self.category = category
        self.country = country
        style = discord.ButtonStyle.success if is_active else discord.ButtonStyle.secondary
        # Use category name in Thai if available
        label = CATEGORY_NAMES.get(category, category)
        # ‡πÉ‡∏ä‡πâ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
        emoji = CATEGORY_EMOJIS.get(category, "")
        super().__init__(
            label=label,
            emoji=emoji,
            style=style,
            custom_id=f"nav_{country}_{category}",
            row=row
        )
    
    async def callback(self, interaction: discord.Interaction):
        view = self.view
        
        # Create a new view with the same categories but showing this category's products
        new_view = CategoryShopView(
            view.all_categories, 
            current_category=self.category, 
            country=self.country,
            quantities=view.quantities, 
            page=0,
            showing_all_countries=False if hasattr(view, 'showing_all_countries') else False
        )
        
        # Create summary of current cart
        summary_lines = []
        total = 0
        
        if hasattr(view, 'all_products') and view.all_products:
            for product in view.all_products:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ id ‡πÉ‡∏ô product ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                if 'id' in product:
                    qty = view.quantities.get(product['id'], 0)
                    if qty > 0:
                        item_total = product['price'] * qty
                        total += item_total
                        summary_lines.append(f"{product['emoji']} {product['name']} - {product['price']:.2f}‡∏ø x {qty} = {item_total:.2f}‡∏ø")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
        category_thai = CATEGORY_NAMES.get(self.category, self.category)
        country_thai = COUNTRY_NAMES.get(self.country, self.country)
        content = f"üõçÔ∏è ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® `{country_thai}` ‡∏´‡∏°‡∏ß‡∏î `{category_thai}`:"
        
        if summary_lines:
            content += f"\n\nüìù ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å:\n" + "\n".join(summary_lines) + f"\n\nüíµ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: {total:.2f}‡∏ø"
        
        # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "‡∏Å‡∏≤‡∏£‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß"
        await interaction.response.defer()
        
        # ‡πÉ‡∏ä‡πâ message.edit ‡πÅ‡∏ó‡∏ô response.edit_message ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏î‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÑ‡∏î‡πâ
        await interaction.message.edit(content=content, view=new_view)

class CategoryShopView(View):
    """View for displaying products from a category with navigation to other categories"""
    def __init__(self, all_categories, current_category=None, country="1", quantities=None, page=0, showing_all_countries=True, all_products=None, cart_items=None):
        super().__init__(timeout=None)
        self.all_categories = all_categories
        self.current_category = current_category
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        if country in COUNTRY_CODES:
            country = COUNTRY_CODES[country]
        elif country in ["thailand", "japan", "usa", "korea", "china"]:
            # ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
            old_to_new = {"thailand": "1", "japan": "2", "usa": "3", "korea": "4", "china": "5"}
            country = old_to_new[country]
            
        self.country = country  # ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 1-5)
        self.quantities = quantities or {}  # Dict to store quantities by product ID
        self.page = page
        self.products_per_page = 5  # Number of products shown per page - ‡∏õ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å 10 ‡πÄ‡∏õ‡πá‡∏ô 5
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        self.showing_all_countries = showing_all_countries
        
        # ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ cart_items ‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        self.cart_items = cart_items or {}
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏™‡∏∏‡∏î
        self.add_country_buttons()
        
        # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á all_products ‡∏°‡∏≤‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏¢
        if all_products:
            self.all_products = all_products
        else:
            # Load products from ALL countries and ALL categories (to track cart items from any country/category)
            self.all_products = []
            # ‡πÉ‡∏ä‡πâ set ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô
            seen_product_ids = set()
            
            # ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÅ‡∏•‡∏∞‡∏ó‡∏∏‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
            for c_code in COUNTRIES:
                for c_category in all_categories:
                    c_products = load_products(c_code, c_category)  # ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
                    if c_products:
                        for curr_product in c_products:
                            # Add category, country, and create unique ID
                            curr_product['category'] = c_category
                            curr_product['country'] = c_code
                            curr_product_id = f"{c_code}_{c_category}_{curr_product['name']}"
                            curr_product['id'] = curr_product_id
                            
                            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                            if curr_product_id not in seen_product_ids:
                                seen_product_ids.add(curr_product_id)
                                self.all_products.append(curr_product)
                                
                                # Initialize quantity if not already set
                                if curr_product_id not in self.quantities:
                                    self.quantities[curr_product_id] = 0
                                    
                                # ‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å cart_items ‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
                                if self.cart_items and curr_product_id in self.cart_items:
                                    self.quantities[curr_product_id] = self.cart_items[curr_product_id]

    
    def add_country_buttons(self):
        """Add buttons for country selection in the top row"""
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        selected_country = self.country
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏µ‡∏ö‡∏±‡∏Å
        print(f"Current country in add_country_buttons: {selected_country}")
        
        if hasattr(self, 'showing_all_countries') and self.showing_all_countries is False:
            # ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏Å‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            country_code = selected_country
            country_name = COUNTRY_NAMES[country_code]
            
            # ‡πÉ‡∏ä‡πâ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡∏ò‡∏á‡∏ä‡∏≤‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏Å‡∏•‡∏≤‡∏á
            country_emoji = COUNTRY_EMOJIS.get(country_code, "üåè")
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô) ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏ñ‡∏ß 0
            selected_button = Button(
                label=country_name,
                emoji=country_emoji,
                style=discord.ButtonStyle.blurple,
                custom_id=f"selected_country_{country_code}",
                row=0
            )
            self.add_item(selected_button)
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏î‡∏π‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏ñ‡∏ß 0 ‡πÄ‡∏ä‡πà‡∏ô‡∏Å‡∏±‡∏ô
            back_button = Button(
                label="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏≠‡∏∑‡πà‡∏ô",
                emoji="üîÑ",
                style=discord.ButtonStyle.primary,
                custom_id="show_all_countries",
                row=0
            )
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô back_to_countries ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®
            async def back_to_countries(interaction):
                await interaction.response.defer()
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
                display_country = selected_country
                if display_country in COUNTRY_CODES:
                    display_country = COUNTRY_CODES[display_country]
                
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á view ‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÄ‡∏î‡∏¥‡∏° ‡πÅ‡∏ï‡πà‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î  
                new_view = CategoryShopView(
                    self.all_categories,
                    current_category=self.current_category,
                    country=display_country,
                    quantities=self.quantities,
                    page=0,
                    showing_all_countries=True
                )
                
                # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
                try:
                    country_name = COUNTRY_NAMES[display_country]
                    category_name = CATEGORY_NAMES[self.current_category]
                    display_message = f"üõçÔ∏è ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® `{country_name}` ‡∏´‡∏°‡∏ß‡∏î `{category_name}`"
                except KeyError:
                    # ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏î‡∏µ‡∏ö‡∏±‡∏Å
                    display_message = f"üõçÔ∏è ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®: `{display_country}`, ‡∏´‡∏°‡∏ß‡∏î: `{self.current_category}`)"
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô content
                summary_lines = []
                total = 0
                
                # ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                all_products = []
                products = load_products(display_country, self.current_category)
                all_products.extend(products)
                
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ
                for product in all_products:
                    if 'id' in product:
                        qty = self.quantities.get(product['id'], 0)
                        if qty > 0:
                            item_total = product['price'] * qty
                            total += item_total
                            summary_lines.append(f"{product['emoji']} {product['name']} - {product['price']:.2f}‡∏ø x {qty} = {item_total:.2f}‡∏ø")
                
                # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ‡πÉ‡∏ô content
                if summary_lines:
                    display_message += f"\n\nüìù ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å:\n" + "\n".join(summary_lines) + f"\n\nüíµ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: {total:.2f}‡∏ø"
                
                await interaction.message.edit(
                    content=display_message, 
                    view=new_view
                )
                
            back_button.callback = back_to_countries
            self.add_item(back_button)
            
        else:
            # ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏≠‡∏∑‡πà‡∏ô" ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            self.showing_all_countries = True
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®
            for i, country_code in enumerate(COUNTRIES):
                country_name = COUNTRY_NAMES[country_code]
                is_active = (country_code == selected_country)
                
                # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏ñ‡∏ß‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö (‡πÇ‡∏î‡∏¢‡πÉ‡∏´‡πâ‡∏°‡∏µ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5 ‡∏õ‡∏∏‡πà‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏ñ‡∏ß)
                # ‡∏õ‡∏∏‡πà‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® 1-5 ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏ñ‡∏ß 0, ‡∏õ‡∏∏‡πà‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® 6-10 ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏ñ‡∏ß 1
                button_row = 0 if i < 5 else 1
                
                # ‡πÉ‡∏ä‡πâ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡∏ò‡∏á‡∏ä‡∏≤‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏Å‡∏•‡∏≤‡∏á
                country_emoji = COUNTRY_EMOJIS.get(country_code, "üåè")
                
                country_button = Button(
                    label=country_name,
                    emoji=country_emoji,
                    style=discord.ButtonStyle.blurple if is_active else discord.ButtonStyle.primary,
                    custom_id=f"country_{country_code}",
                    row=button_row
                )
                
                # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤ country_code ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÉ‡∏ô callback
                current_country = country_code
                
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á closure ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤ country_code ‡πÅ‡∏¢‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏∏‡πà‡∏°
                def create_country_callback(country_to_display):
                    async def country_button_callback(interaction):
                        # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "‡∏Å‡∏≤‡∏£‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß"
                        await interaction.response.defer()
                        
                        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ country_to_display ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                        # ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
                        display_country = country_to_display
                        if display_country in COUNTRY_CODES:
                            display_country = COUNTRY_CODES[display_country]
                            
                        # ‡∏™‡∏£‡πâ‡∏≤‡∏á view ‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® ‡πÅ‡∏•‡∏∞‡∏ã‡πà‡∏≠‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏≠‡∏∑‡πà‡∏ô‡πÜ
                        new_view = CategoryShopView(
                            self.all_categories,
                            current_category=self.current_category,
                            country=display_country,
                            quantities=self.quantities,
                            page=0,  # ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
                            showing_all_countries=False
                        )
                        
                        # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
                        try:
                            country_name = COUNTRY_NAMES[display_country]
                            category_name = CATEGORY_NAMES[self.current_category]
                            display_message = f"üõçÔ∏è ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® `{country_name}` ‡∏´‡∏°‡∏ß‡∏î `{category_name}`"
                        except KeyError:
                            # ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏î‡∏µ‡∏ö‡∏±‡∏Å
                            display_message = f"üõçÔ∏è ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®: `{display_country}`, ‡∏´‡∏°‡∏ß‡∏î: `{self.current_category}`)"
                        
                        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô content
                        summary_lines = []
                        total = 0
                        
                        # ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                        all_products = []
                        products = load_products(display_country, self.current_category)
                        all_products.extend(products)
                        
                        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ
                        for product in all_products:
                            if 'id' in product:
                                qty = self.quantities.get(product['id'], 0)
                                if qty > 0:
                                    item_total = product['price'] * qty
                                    total += item_total
                                    summary_lines.append(f"{product['emoji']} {product['name']} - {product['price']:.2f}‡∏ø x {qty} = {item_total:.2f}‡∏ø")
                        
                        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ‡πÉ‡∏ô content
                        if summary_lines:
                            display_message += f"\n\nüìù ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å:\n" + "\n".join(summary_lines) + f"\n\nüíµ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: {total:.2f}‡∏ø"
                        
                        # ‡πÉ‡∏ä‡πâ message.edit ‡πÅ‡∏ó‡∏ô response.edit_message ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏î‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÑ‡∏î‡πâ
                        await interaction.message.edit(
                            content=display_message, 
                            view=new_view
                        )
                    return country_button_callback
                
                # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î callback ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°
                country_button.callback = create_country_callback(country_code)
                
                # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏á‡πÉ‡∏ô view
                self.add_item(country_button)
        
        # Add category navigation buttons with maximum 5 buttons per row (Discord limit)
        for i, category in enumerate(self.all_categories):
            is_active = (category == self.current_category)
            # ‡∏õ‡∏∏‡πà‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà 1-5 ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏ñ‡∏ß 1, ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏ñ‡∏ß 2
            row = 1 if i < 5 else 2
            
            # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 10 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô
            if i >= 10:
                break
                
            self.add_item(CategoryNavButton(category, is_active=is_active, row=row, country=self.country))
        
        # Display products for current category only (all products in the same row)
        if self.current_category:
            # Get products for the current category from current country
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ self.all_products ‡∏°‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
            if hasattr(self, 'all_products') and self.all_products:
                category_products = [p for p in self.all_products if p.get('category') == self.current_category and p.get('country') == self.country]
            else:
                # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ self.all_products ‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
                category_products = load_products(self.country, self.current_category)
            
            # Calculate start and end indices for pagination
            start_idx = self.page * self.products_per_page
            end_idx = start_idx + self.products_per_page
            
            # Get current page of products
            page_products = category_products[start_idx:end_idx]
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß 3 (‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏ñ‡∏ß 0-1 ‡πÉ‡∏ä‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÅ‡∏•‡∏∞‡πÅ‡∏ñ‡∏ß 2 ‡πÉ‡∏ä‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà)
            for i, product in enumerate(page_products):
                if i < 5:  # ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5 ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤ (‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î Discord: ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5 ‡∏õ‡∏∏‡πà‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏ñ‡∏ß)
                    button = ProductButton(product)
                    button.row = 3  # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 3 ‡πÄ‡∏™‡∏°‡∏≠
                    self.add_item(button)
            
            # Add pagination buttons if needed
            if len(category_products) > self.products_per_page:
                # Previous page button (left arrow)
                if self.page > 0:
                    prev_button = Button(emoji="‚¨ÖÔ∏è", style=discord.ButtonStyle.secondary, row=4)
                    prev_button.callback = self.prev_page_callback
                    self.add_item(prev_button)
                
                # Page indicator - clickable for page navigation
                total_pages = (len(category_products) - 1) // self.products_per_page + 1
                self.total_pages = total_pages  # Store for callback use
                # Create a PageIndicatorButton instead of a regular Button with callback
                page_indicator = PageIndicatorButton(
                    page=self.page,
                    total_pages=total_pages, 
                    row=4,
                    view=self
                )
                self.add_item(page_indicator)
                
                # Next page button (right arrow)
                if end_idx < len(category_products):
                    next_button = Button(emoji="‚û°Ô∏è", style=discord.ButtonStyle.secondary, row=4)
                    next_button.callback = self.next_page_callback
                    self.add_item(next_button)
        
        # Add control buttons at the bottom - use row 4 after pagination buttons
        reset_button = ResetCartButton()
        reset_button.row = 4
        self.add_item(reset_button)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ all_products ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô None ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á ConfirmButton
        products_to_use = self.all_products if hasattr(self, 'all_products') and self.all_products else []
        
        confirm_button = ConfirmButton(products_to_use)
        confirm_button.row = 4
        self.add_item(confirm_button)
    
    async def go_to_page(self, interaction: discord.Interaction, page_number: int):
        """Navigate to a specific page number"""
        # Validate page number (1-based in UI, 0-based in code)
        page_index = page_number - 1
        if page_index < 0:
            page_index = 0
        if hasattr(self, 'total_pages') and page_index >= self.total_pages:
            page_index = self.total_pages - 1
            
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        display_country = self.country
        if display_country in COUNTRY_CODES:
            display_country = COUNTRY_CODES[display_country]
            
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®
        showing_all_countries = getattr(self, 'showing_all_countries', False)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á quantities_copy ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏à
        quantities_copy = {}
        for product_id, qty in self.quantities.items():
            quantities_copy[product_id] = qty
        
        # Create a new view with the requested page
        new_view = CategoryShopView(
            self.all_categories,
            current_category=self.current_category,
            country=display_country,
            quantities=quantities_copy,
            page=page_index,
            showing_all_countries=showing_all_countries,
            all_products=self.all_products,  # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
            cart_items=self.quantities  # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏¢‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏Å
        )
        
        # ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á objects ‡πÑ‡∏°‡πà‡∏™‡∏π‡∏ç‡∏´‡∏≤‡∏¢
        for product_id, qty in self.quantities.items():
            if qty > 0:  # ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                new_view.quantities[product_id] = qty
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
        category_name = CATEGORY_NAMES.get(self.current_category, self.current_category)
        country_name = COUNTRY_NAMES.get(display_country, display_country)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®
        if showing_all_countries:
            content_message = f"üõçÔ∏è ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î `{category_name}`"
        else:
            content_message = f"üõçÔ∏è ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® `{country_name}` ‡∏´‡∏°‡∏ß‡∏î `{category_name}`"
            
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        selected_items = []
        total_price = 0
        
        # ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• quantities ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
        for product in self.all_products:
            if 'id' in product:
                product_id = product['id']
                qty = quantities_copy.get(product_id, 0)
                if qty > 0:
                    item_total = product['price'] * qty
                    total_price += item_total
                    
                    # ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏µ‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
                    product_country = product.get('country', '')
                    if product_country in COUNTRY_NAMES:
                        country_name_in_product = COUNTRY_NAMES[product_country]
                        selected_items.append(f"{product['emoji']} {product['name']} ({country_name_in_product}) - {product['price']:.2f}‡∏ø x {qty} = {item_total:.2f}‡∏ø")
                    else:
                        selected_items.append(f"{product['emoji']} {product['name']} - {product['price']:.2f}‡∏ø x {qty} = {item_total:.2f}‡∏ø")
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ‡πÉ‡∏ô content
        if selected_items:
            content_message += f"\n\nüìù ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å:\n" + "\n".join(selected_items) + f"\n\nüíµ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: {total_price:.2f}‡∏ø"
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ interaction ‡∏ñ‡∏π‡∏Å defer ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if interaction.response.is_done():
            # ‡∏ñ‡πâ‡∏≤ defer ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ message.edit ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
            await interaction.message.edit(content=content_message, view=new_view)
        else:
            # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ defer ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ defer ‡∏Å‡πà‡∏≠‡∏ô
            await interaction.response.defer()
            # ‡πÉ‡∏ä‡πâ message.edit ‡πÅ‡∏ó‡∏ô response.edit_message ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏î‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÑ‡∏î‡πâ    
            await interaction.message.edit(content=content_message, view=new_view)
        
    async def prev_page_callback(self, interaction: discord.Interaction):
        """Callback for previous page button"""
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
        new_page = max(0, self.page - 1)
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏ß‡∏°
        total_products = len(load_products(self.country, self.current_category))
        total_pages = (total_products - 1) // self.products_per_page + 1
        
        if interaction.response.is_done():
            # ‡∏ñ‡πâ‡∏≤‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ Edit Message
            new_view = CategoryShopView(
                self.all_categories,
                current_category=self.current_category,
                country=self.country,
                quantities=self.quantities,
                page=new_page,
                showing_all_countries=self.showing_all_countries,
                all_products=self.all_products  # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
            )
            
            # ‡πÇ‡∏≠‡∏ô‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏à‡∏≤‡∏Å view ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á view ‡πÉ‡∏´‡∏°‡πà
            self._transfer_data_to_new_view(new_view)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            display_message = self._generate_content_with_selected_items(new_view)
            
            await interaction.message.edit(content=display_message, view=new_view)
        else:
            # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
            await interaction.response.defer()
            await self.go_to_page(interaction, new_page + 1)  # +1 ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ UI ‡∏ô‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 1 ‡πÅ‡∏ï‡πà‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 0
    
    async def next_page_callback(self, interaction: discord.Interaction):
        """Callback for next page button"""
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
        total_products = len(load_products(self.country, self.current_category))
        total_pages = (total_products - 1) // self.products_per_page + 1
        new_page = min(self.page + 1, total_pages - 1)
        
        if interaction.response.is_done():
            # ‡∏ñ‡πâ‡∏≤‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ Edit Message
            new_view = CategoryShopView(
                self.all_categories,
                current_category=self.current_category,
                country=self.country,
                quantities=self.quantities,
                page=new_page,
                showing_all_countries=self.showing_all_countries,
                all_products=self.all_products  # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
            )
            
            # ‡πÇ‡∏≠‡∏ô‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏à‡∏≤‡∏Å view ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á view ‡πÉ‡∏´‡∏°‡πà
            self._transfer_data_to_new_view(new_view)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            display_message = self._generate_content_with_selected_items(new_view)
            
            await interaction.message.edit(content=display_message, view=new_view)
        else:
            # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
            await interaction.response.defer()
            await self.go_to_page(interaction, new_page + 1)  # +1 ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ UI ‡∏ô‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 1 ‡πÅ‡∏ï‡πà‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 0
    
    def _transfer_data_to_new_view(self, new_view):
        """‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏à‡∏≤‡∏Å view ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á view ‡πÉ‡∏´‡∏°‡πà"""
        # ‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        if hasattr(self, 'all_products') and self.all_products:
            new_view.all_products = self.all_products
            
        # ‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        if hasattr(self, 'quantities') and self.quantities:
            for product_id, qty in self.quantities.items():
                if qty > 0:  # ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                    new_view.quantities[product_id] = qty
        
        return new_view
        
    def _generate_content_with_selected_items(self, view):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"""
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÉ‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
        category_name = CATEGORY_NAMES.get(self.current_category, self.current_category)
        country_name = COUNTRY_NAMES.get(self.country, self.country)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®
        if self.showing_all_countries:
            content_message = f"üõçÔ∏è ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î `{category_name}`"
        else:
            content_message = f"üõçÔ∏è ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® `{country_name}` ‡∏´‡∏°‡∏ß‡∏î `{category_name}`"
        
        # ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÅ‡∏•‡∏∞‡∏ó‡∏∏‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
        selected_item_summary_lines = []
        total_selected = 0
        
        # ‡∏≠‡πà‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÅ‡∏•‡∏∞‡∏ó‡∏∏‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
        for country_code in COUNTRIES:
            for category in self.all_categories:
                # ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ô‡∏µ‡πâ
                country_category_products = load_products(country_code, category)
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                for product in country_category_products:
                    if 'id' in product:
                        qty = self.quantities.get(product['id'], 0)
                        if qty > 0:
                            item_total = product['price'] * qty
                            total_selected += item_total
                            
                            # ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏µ‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
                            product_country = product.get('country', '')
                            if product_country in COUNTRY_NAMES:
                                country_name_in_product = COUNTRY_NAMES[product_country]
                                selected_item_summary_lines.append(f"{product['emoji']} {product['name']} ({country_name_in_product}) - {product['price']:.2f}‡∏ø x {qty} = {item_total:.2f}‡∏ø")
                            else:
                                selected_item_summary_lines.append(f"{product['emoji']} {product['name']} - {product['price']:.2f}‡∏ø x {qty} = {item_total:.2f}‡∏ø")
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ‡πÉ‡∏ô content
        if selected_item_summary_lines:
            content_message += f"\n\nüìù ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å:\n" + "\n".join(selected_item_summary_lines) + f"\n\nüíµ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: {total_selected:.2f}‡∏ø"
            
        return content_message

class CategoryLabel(Button):
    """Non-interactive button that serves as a category label"""
    def __init__(self, category, row=0):
        super().__init__(
            label=f"‡∏´‡∏°‡∏ß‡∏î {category}", 
            style=discord.ButtonStyle.secondary,
            disabled=True,
            row=row
        )
    
    async def callback(self, interaction: discord.Interaction):
        pass

class ProductQuantityModal(Modal):
    """Modal for entering product quantity in shop view"""
    def __init__(self, product, view):
        super().__init__(title=f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {product['name']}")
        self.product = product
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ id ‡πÉ‡∏ô product ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        self.product_id = product.get('id', f"{product.get('country', '')}_"
                                          f"{product.get('category', '')}_"
                                          f"{product['name']}")
        self.shop_view = view
        
        # Create text input for quantity
        self.quantity_input = TextInput(
            label=f"‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {product['name']} ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£",
            placeholder="‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô",
            required=True,
            min_length=1,
            max_length=3,
            default="1"
        )
        self.add_item(self.quantity_input)
    
    async def on_submit(self, interaction: discord.Interaction):
        try:
            # Convert input to integer
            quantity = int(self.quantity_input.value)
            if quantity < 0:
                await interaction.response.send_message("‚ùå ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö 0", ephemeral=True)
                return
            elif quantity > 100:
                await interaction.response.send_message("‚ùå ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 100", ephemeral=True)
                return
                
            # Set the quantity in the view
            self.shop_view.quantities[self.product_id] = quantity
            
            # Create summary of selected items - track which products we've already shown
            summary_lines = []
            total = 0
            seen_product_ids = set()
            
            for product in self.shop_view.all_products:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á id ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ
                if 'id' not in product:
                    product['id'] = f"{product.get('country', '')}_" \
                                   f"{product.get('category', '')}_" \
                                   f"{product['name']}"
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏¢‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                if product['id'] in seen_product_ids:
                    continue
                
                seen_product_ids.add(product['id'])
                qty = self.shop_view.quantities.get(product['id'], 0)
                if qty > 0:
                    item_total = product['price'] * qty
                    total += item_total
                    
                    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
                    country_code = product.get('country', '')
                    # ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÄ‡∏î‡∏¥‡∏°‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
                    if country_code in COUNTRY_CODES:
                        country_code = COUNTRY_CODES[country_code]
                    country_name = COUNTRY_NAMES.get(country_code, '')
                    
                    if country_name:
                        summary_lines.append(f"{product['emoji']} {product['name']} ({country_name}) - {product['price']:.2f}‡∏ø x {qty} = {item_total:.2f}‡∏ø")
                    else:
                        summary_lines.append(f"{product['emoji']} {product['name']} - {product['price']:.2f}‡∏ø x {qty} = {item_total:.2f}‡∏ø")
            
            # Current category being displayed
            current_category = self.shop_view.current_category
            
            # Update message with current cart
            content = f"üõçÔ∏è ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î `{current_category}`:"
            if summary_lines:
                content += f"\n\nüìù ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å:\n" + "\n".join(summary_lines) + f"\n\nüíµ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: {total:.2f}‡∏ø"
            
            await interaction.response.edit_message(content=content, view=self.shop_view)
            
        except ValueError:
            await interaction.response.send_message("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô", ephemeral=True)

class ProductButton(Button):
    """Button for products in shop view"""
    def __init__(self, product, row=0):
        self.product = product
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á product id ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ
        product_id = product.get('id')
        if not product_id:
            product_id = f"{product.get('country', '')}_" \
                        f"{product.get('category', '')}_" \
                        f"{product['name']}"
            product['id'] = product_id
            
        super().__init__(
            label=f"{product['emoji']} {product['name']} - {product['price']:.2f}‡∏ø", 
            style=discord.ButtonStyle.primary,
            custom_id=f"product_{product_id}",
            row=row
        )
    
    async def callback(self, interaction: discord.Interaction):
        view = self.view
        
        # Show modal for quantity input
        modal = ProductQuantityModal(self.product, view)
        await interaction.response.send_modal(modal)

class ResetCartButton(Button):
    """Button to reset the cart in shop view"""
    def __init__(self):
        super().__init__(
            label="üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤", 
            style=discord.ButtonStyle.danger,
            custom_id="reset_cart"
        )
    
    async def callback(self, interaction: discord.Interaction):
        view = self.view
        # Reset all quantities
        for product_id in view.quantities:
            view.quantities[product_id] = 0
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
        current_category = getattr(view, 'current_category', "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏ß‡∏î")
        country = getattr(view, 'country', "1")
        showing_all_countries = getattr(view, 'showing_all_countries', False)
        
        # ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÉ‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
        category_name = CATEGORY_NAMES.get(current_category, current_category)
        country_name = COUNTRY_NAMES.get(country, country)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®
        if showing_all_countries:
            content_message = f"üõçÔ∏è ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î `{category_name}`"
        else:
            content_message = f"üõçÔ∏è ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® `{country_name}` ‡∏´‡∏°‡∏ß‡∏î `{category_name}`"
        
        await interaction.response.edit_message(
            content=content_message, 
            view=view
        )

class ConfirmButton(Button):
    """Button to confirm the purchase"""
    def __init__(self, products):
        self.products = products
        super().__init__(
            label="‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠", 
            style=discord.ButtonStyle.success,
            custom_id="confirm_purchase"
        )
    
    async def callback(self, interaction: discord.Interaction):
        view = self.view
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ view ‡∏°‡∏µ all_products ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö CategoryShopView)
        products_to_check = []
        if hasattr(view, 'all_products') and view.all_products:
            products_to_check = view.all_products  # ‡πÉ‡∏ä‡πâ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å view
        else:
            products_to_check = self.products  # ‡πÉ‡∏ä‡πâ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏ï‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á button
        
        # Calculate total and prepare items list
        total_price = 0
        items = []
        lines = []
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ view ‡∏°‡∏µ attribute quantities ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if not hasattr(view, 'quantities'):
            await interaction.response.send_message("‚ùó ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", ephemeral=True)
            return
            
        for product in products_to_check:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ product ‡∏°‡∏µ id ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if 'id' not in product:
                if 'name' in product and ('country' in product or 'category' in product):
                    product['id'] = f"{product.get('country', '')}_" \
                                   f"{product.get('category', '')}_" \
                                   f"{product['name']}"
                else:
                    continue  # ‡∏Ç‡πâ‡∏≤‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠
                    
            qty = view.quantities.get(product['id'], 0)
            
            # Convert qty to int if needed
            try:
                if isinstance(qty, str) and qty.isdigit():
                    qty = int(qty)
                elif not isinstance(qty, int):
                    qty = 0
            except (ValueError, TypeError):
                qty = 0
                
            if qty > 0:
                total = product['price'] * qty
                total_price += total
                
                # ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏à‡∏≤‡∏Å product
                country_code = product.get('country', '')
                # ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÄ‡∏î‡∏¥‡∏°‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
                if country_code in COUNTRY_CODES:
                    country_code = COUNTRY_CODES[country_code]
                country_name = COUNTRY_NAMES.get(country_code, '')
                
                # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
                items.append({
                    "name": product["name"], 
                    "qty": qty, 
                    "price": product["price"],
                    "country": country_name or country_code
                })
                
                if country_name:
                    lines.append(f"{product['emoji']} {product['name']} ({country_name}) - {product['price']:.2f}‡∏ø x {qty} = {total:.2f}‡∏ø")
                else:
                    lines.append(f"{product['emoji']} {product['name']} - {product['price']:.2f}‡∏ø x {qty} = {total:.2f}‡∏ø")
        
        # Check if cart is empty
        if total_price == 0:
            await interaction.response.send_message("‚ùó ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô", ephemeral=True)
            return
            
        # Log purchase and create receipt
        log_purchase(interaction.user, items, total_price)
        summary = "\n".join(lines)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏µ‡πà‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        countries_purchased = set()
        for product in products_to_check:
            if 'id' in product and 'country' in product:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                product_qty = view.quantities.get(product['id'], 0)
                
                # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô int ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
                try:
                    if isinstance(product_qty, str) and product_qty.isdigit():
                        product_qty = int(product_qty)
                    elif not isinstance(product_qty, int):
                        product_qty = 0
                except (ValueError, TypeError):
                    product_qty = 0
                
                if product_qty > 0:
                    country_code = product.get('country', '')
                    # ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÄ‡∏î‡∏¥‡∏°‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
                    if country_code in COUNTRY_CODES:
                        country_code = COUNTRY_CODES[country_code]
                    # ‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏à‡∏≤‡∏Å country code
                    country_name = COUNTRY_NAMES.get(country_code, '')
                    if country_name:
                        countries_purchased.add(country_name)
                    
        countries_text = "‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®" if not countries_purchased else ", ".join(countries_purchased)
        
        # Create receipt embeds
        public_embed = discord.Embed(title="üßæ ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠", color=0x00ff00)
        public_embed.set_author(name=f"‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: {interaction.user.display_name}", icon_url=interaction.user.display_avatar.url)
        public_embed.description = summary
        public_embed.add_field(name="‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®", value=f"üåè {countries_text}", inline=False)
        public_embed.add_field(name="‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°", value=f"üíµ {total_price:.2f}‡∏ø", inline=False)
        
        # QR Code for payment
        qr_embed = discord.Embed(
            title="üì≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πÅ‡∏Å‡∏ô QR Code ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô",
            description=f"**‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤:** {interaction.user.mention}\n**‡∏¢‡∏≠‡∏î‡∏ä‡∏≥‡∏£‡∏∞:** üíµ {total_price:.2f}‡∏ø\n**‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£:** SCB (‡πÑ‡∏ó‡∏¢‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå)",
            color=0x4f0099
        )
        qr_embed.set_image(url="https://media.discordapp.net/attachments/1177559485137555456/1297159106787934249/QRCodeSCB.png?ex=6823d54f&is=682283cf&hm=10acdea9e554c0c107119f230b8a9122498dc5a240e4e24080f3fd7f204c9df9&format=webp&quality=lossless&width=760&height=760")
        qr_embed.set_footer(text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡πÅ‡∏Ñ‡∏õ‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏° "‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß" ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
        class DeliveredButtonNew(Button):
            def __init__(self, customer):
                self.customer = customer
                super().__init__(label="‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô)", style=discord.ButtonStyle.success)
            
            async def callback(self, interaction):
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                if interaction.user.guild_permissions.administrator:
                    # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏≠‡∏ô‡∏ü‡∏¥‡∏Å
                    thank_you_message = load_thank_you_message()
                    
                    # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á !ty
                    await interaction.response.send_message(f"{self.customer.mention} {thank_you_message}", ephemeral=False)
                    
                    # ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏î‡πÅ‡∏•‡πâ‡∏ß
                    self.disabled = True
                    if self.view:
                        await interaction.message.edit(view=self.view)
                else:
                    await interaction.response.send_message("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)", ephemeral=True)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á View ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°
        admin_view = View()
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
        delivered_button = DeliveredButtonNew(interaction.user)
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
        admin_view.add_item(delivered_button)
        
        # Send receipt with admin button
        await interaction.response.send_message(embeds=[public_embed, qr_embed], view=admin_view)
        
        # Reset cart
        for product_id in view.quantities:
            view.quantities[product_id] = 0
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
        current_category = getattr(view, 'current_category', "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏ß‡∏î")
        country = getattr(view, 'country', "1")
        showing_all_countries = getattr(view, 'showing_all_countries', False)
        
        # ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÉ‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
        category_name = CATEGORY_NAMES.get(current_category, current_category)
        country_name = COUNTRY_NAMES.get(country, country)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®
        if showing_all_countries:
            content_message = f"üõçÔ∏è ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î `{category_name}`"
        else:
            content_message = f"üõçÔ∏è ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® `{country_name}` ‡∏´‡∏°‡∏ß‡∏î `{category_name}`"
            
        await interaction.message.edit(content=content_message, view=view)



class ViewSelectedCategoriesButton(Button):
    """Button to view products from selected categories"""
    def __init__(self):
        super().__init__(
            label="‡∏î‡∏π‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å", 
            style=discord.ButtonStyle.primary,
            custom_id="view_selected",
            row=3
        )
    
    async def callback(self, interaction: discord.Interaction):
        view = self.view
        
        if not view.selected_categories:
            await interaction.response.send_message("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà", ephemeral=True)
            return
        
        # Create a shop view with products from first selected category
        first_category = view.selected_categories[0]
        shop_view = CategoryShopView(CATEGORIES, current_category=first_category)
        
        if not shop_view.all_products:
            await interaction.response.send_message("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å", ephemeral=True)
            return
            
        # Send new message with product buttons
        await interaction.response.send_message(
            content=f"üõçÔ∏è ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î `{first_category}`", 
            view=shop_view
        )

class CategoryButton(Button):
    """Button for single category selection"""
    def __init__(self, category, label, emoji, row=0):
        self.category = category
        super().__init__(
            label=label, 
            emoji=emoji,
            style=discord.ButtonStyle.secondary,
            custom_id=f"category_{category}",
            row=row
        )
    
    async def callback(self, interaction: discord.Interaction):
        # Create a new view with the selected category
        view = ShopView(category=self.category)
        
        if len(view.products) == 0:
            await interaction.response.send_message(f"‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î `{self.category}`", ephemeral=True)
            return
            
        await interaction.response.edit_message(
            content=f"üõçÔ∏è ‡∏´‡∏°‡∏ß‡∏î `{self.category}` - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:", 
            view=view
        )

class ShopView(View):
    """Main shop view with product buttons"""
    def __init__(self, category=None):
        super().__init__(timeout=None)
        
        self.current_category = category
        
        # Show category buttons if no category is selected
        if category is None:
            # Add category buttons in first row
            self.add_item(CategoryButton("money", "‡πÄ‡∏á‡∏¥‡∏ô", "üí∞", row=0))
            self.add_item(CategoryButton("weapon", "‡∏≠‡∏≤‡∏ß‡∏∏‡∏ò", "üî´", row=0))
            self.add_item(CategoryButton("item", "‡πÑ‡∏≠‡πÄ‡∏ó‡∏°", "üß™", row=0))
            
            # Add more category buttons in second row
            self.add_item(CategoryButton("car", "‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå", "üöó", row=1)) 
            self.add_item(CategoryButton("fashion", "‡πÅ‡∏ü‡∏ä‡∏±‡πà‡∏ô", "üëí", row=1))
            self.add_item(CategoryButton("rentcar", "‡πÄ‡∏ä‡πà‡∏≤‡∏£‡∏ñ", "üöô", row=1))
        
        # Load products from category file if specified
        self.products = load_products(category)
        self.quantities = [0] * len(self.products)
        
        # Create buttons for each product
        for idx, product in enumerate(self.products):
            self.add_item(LegacyProductButton(idx, self.products))
            
        # Add reset and confirm buttons for shopping cart
        if category is not None:
            self.add_item(ResetButton())
            self.add_item(ConfirmButton(self.products))
            
            # Add back button to return to categories
            self.add_item(BackButton())

class LegacyProductButton(Button):
    """Button for each product in the shop (original implementation)"""
    def __init__(self, index, products):
        self.index = index
        product = products[index]
        label = f"{product['emoji']} {product['name']} - {product['price']:.2f}‡∏ø"
        super().__init__(label=label, style=discord.ButtonStyle.primary, custom_id=f"product_{index}")

    async def callback(self, interaction: discord.Interaction):
        view: ShopView = self.view
        
        # Create modal for quantity input
        modal = QuantityModal(self.index, view.products[self.index])
        await interaction.response.send_modal(modal)
        # Wait for modal to be submitted
        await modal.wait()
        
        if modal.quantity is not None:
            # Update quantity in view
            view.quantities[self.index] = modal.quantity
            
            # Generate summary of selected items
            lines = []
            for i, qty in enumerate(view.quantities):
                if qty > 0:
                    p = view.products[i]
                    lines.append(f"{p['emoji']} {p['name']} - {p['price']:.2f}‡∏ø x {qty} = {p['price'] * qty:.2f}‡∏ø")
            
            summary = "\n".join(lines) or "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"
            total = sum(view.products[i]['price'] * qty for i, qty in enumerate(view.quantities))
            
            message = f"üõçÔ∏è ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å:\n{summary}\n\nüíµ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: {total:.2f}‡∏ø"
            await interaction.message.edit(content=message, view=view)

class BackButton(Button):
    """Button to go back to category selection"""
    def __init__(self):
        super().__init__(
            label="‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà", 
            style=discord.ButtonStyle.secondary,
            custom_id="back_button",
            row=4
        )
    
    async def callback(self, interaction: discord.Interaction):
        # Create a new view with category buttons
        view = ShopView(category=None)
        await interaction.response.edit_message(
            content="üìã ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:", 
            view=view
        )

class ResetButton(Button):
    """Button to reset the cart"""
    def __init__(self):
        super().__init__(label="üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤", style=discord.ButtonStyle.danger, custom_id="reset")

    async def callback(self, interaction: discord.Interaction):
        view: ShopView = self.view
        view.quantities = [0] * len(view.products)
        await interaction.response.edit_message(content="üõçÔ∏è ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å:\n‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", view=view)

class LegacyConfirmButton(Button):
    """Button to confirm the purchase (legacy version)"""
    def __init__(self, products):
        super().__init__(label="‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠", style=discord.ButtonStyle.success, custom_id="confirm")
        self.products = products
    
    async def callback(self, interaction: discord.Interaction):
        view = self.view
        # Use a dictionary-based quantities system for CategoryShopView
        if hasattr(view, 'all_products') and isinstance(view.quantities, dict):
            # This is a CategoryShopView with dictionary quantities
            total_price = 0
            selected_products = []
            
            # Loop through all products
            for product in view.all_products:
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á ID ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
                if 'id' not in product:
                    product['id'] = f"{product.get('country', '')}_" \
                                   f"{product.get('category', '')}_" \
                                   f"{product['name']}"
                
                product_id = product['id']
                qty = view.quantities.get(product_id, 0)
                
                # Convert qty to int if needed
                try:
                    if isinstance(qty, str) and qty.isdigit():
                        qty = int(qty)
                    elif not isinstance(qty, int):
                        qty = 0
                except (ValueError, TypeError):
                    qty = 0
                
                if qty > 0:  # Check if qty is greater than 0
                    # Convert price to int if needed
                    price = product['price']
                    if isinstance(price, str) and price.isdigit():
                        price = int(price)
                    
                    total_price += price * qty
                    selected_products.append((product, qty))
            
            # No selected products
            if total_price == 0 or not selected_products:
                await interaction.response.send_message("‚ùó ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô", ephemeral=True)
                return
                
            # Generate lines for receipt
            lines = []
            items = []
            for product, qty in selected_products:
                price = product['price']
                if isinstance(price, str) and price.isdigit():
                    price = int(price)
                
                total = price * qty
                # ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÅ‡∏ö‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
                country_code = product.get('country', '1')  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å 'thailand' ‡πÄ‡∏õ‡πá‡∏ô '1'
                # ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÄ‡∏î‡∏¥‡∏°‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
                if country_code in COUNTRY_CODES:
                    country_code = COUNTRY_CODES[country_code]
                country_thai = COUNTRY_NAMES.get(country_code, country_code)
                
                # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏•‡∏á‡πÉ‡∏ô‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à
                lines.append(f"{product['emoji']} {product['name']} ({country_thai}) - {price:.2f}‡∏ø x {qty} = {total:.2f}‡∏ø")
                items.append({
                    "name": product["name"], 
                    "qty": qty, 
                    "price": price,
                    "country": country_code,
                    "country_thai": country_thai
                })
        else:
            # Legacy implementation for ShopView with list quantities
            total_price = 0
            for i, qty in enumerate(view.quantities):
                # Try to convert qty to int safely
                try:
                    if isinstance(qty, str) and qty.isdigit():
                        qty_val = int(qty)
                    else:
                        qty_val = qty
                except (ValueError, TypeError):
                    continue  # Skip invalid quantities
                    
                if qty_val > 0:
                    # Convert price safely
                    try:
                        price_str = self.products[i]['price']
                        price = int(price_str) if isinstance(price_str, str) else price_str
                        total_price += price * qty_val
                    except (ValueError, TypeError, IndexError, KeyError):
                        continue  # Skip invalid prices
        
        # Check if cart is empty
        if total_price == 0:
            await interaction.response.send_message("‚ùó ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô", ephemeral=True)
            return
            
        # Receipt lines and items were already generated in the code above
        
        # Log the purchase and generate receipt
        try:
            log_purchase(interaction.user, items, total_price)
            summary = "\n".join(lines)
            embed = discord.Embed(
                title="üßæ ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô",
                description=f"**‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤:** {interaction.user.mention}\n**‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:** {datetime.now().strftime('%d/%m/%Y %H:%M')}",
                color=0x00ff00
            )
            embed.add_field(name="‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", value=summary, inline=False)
            embed.add_field(name="‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°", value=f"üíµ {total_price:.2f}‡∏ø", inline=False)
            embed.set_footer(text="‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£! üôè")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠ (‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
            await interaction.response.send_message(embed=embed, ephemeral=True)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡πÅ‡∏ä‡∏ó‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏´‡πá‡∏ô
            public_embed = discord.Embed(
                title="üßæ ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô",
                description=f"**‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤:** {interaction.user.mention}\n**‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:** {datetime.now().strftime('%d/%m/%Y %H:%M')}",
                color=0x00ff00
            )
            public_embed.add_field(name="‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", value=summary, inline=False)
            public_embed.add_field(name="‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°", value=f"üíµ {total_price:.2f}‡∏ø", inline=False)
            
            # ‡πÅ‡∏™‡∏î‡∏á QR Code ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
            qr_embed = discord.Embed(
                title="üì≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πÅ‡∏Å‡∏ô QR Code ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô",
                description=f"**‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤:** {interaction.user.mention}\n**‡∏¢‡∏≠‡∏î‡∏ä‡∏≥‡∏£‡∏∞:** üíµ {total_price:.2f}‡∏ø\n**‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£:** SCB (‡πÑ‡∏ó‡∏¢‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå)",
                color=0x4f0099
            )
            # ‡πÉ‡∏ä‡πâ async function ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å MongoDB
            qr_url = await load_qrcode_url_async_local()
            qr_embed.set_image(url=qr_url)
            qr_embed.set_footer(text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πÅ‡∏Å‡∏ô QR Code ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô ‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡πÅ‡∏Ñ‡∏õ‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô")
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏° "‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß" ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
            class DeliveredButton(Button):
                def __init__(self, customer):
                    self.customer = customer
                    super().__init__(label="‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô)", style=discord.ButtonStyle.success)
                
                async def callback(self, interaction):
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                    if interaction.user.guild_permissions.administrator:
                        # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏≠‡∏ô‡∏ü‡∏¥‡∏Å
                        thank_you_message = load_thank_you_message()
                        
                        # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á !ty
                        await interaction.response.send_message(f"{self.customer.mention} {thank_you_message}", ephemeral=False)
                        
                        # ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏î‡πÅ‡∏•‡πâ‡∏ß
                        self.disabled = True
                        if self.view:  # ‡πÉ‡∏ä‡πâ self.view ‡πÅ‡∏ó‡∏ô _view
                            await interaction.message.edit(view=self.view)
                    else:
                        await interaction.response.send_message("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)", ephemeral=True)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á View ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°
            admin_view = View()
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
            delivered_button = DeliveredButton(interaction.user)
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
            admin_view.add_item(delivered_button)
            
            # ‡∏™‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞‡πÅ‡∏•‡∏∞ QR Code ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
            print("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏∏‡πà‡∏° ‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô)")
            await interaction.followup.send(embeds=[public_embed, qr_embed], view=admin_view)
            
            # Reset the cart based on view type
            if hasattr(view, 'products'):
                # Old ShopView with list-based quantities
                view.quantities = [0] * len(view.products)
                await interaction.message.edit(content="üõçÔ∏è ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å:\n‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", view=view)
            elif hasattr(view, 'all_products') and isinstance(view.quantities, dict):
                # CategoryShopView with dictionary-based quantities
                for key in list(view.quantities.keys()):
                    view.quantities[key] = 0
                current_category = view.current_category
                await interaction.message.edit(content=f"üõçÔ∏è ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î `{current_category}`", view=view)
        except Exception as e:
            await interaction.response.send_message(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}", ephemeral=True)

@bot.event
async def on_ready():
    """Event triggered when the bot is ready"""
    print(f"Bot is ready! Logged in as {bot.user}")
    
    # Load categories from file
    load_categories()
    
    # Create history file if it doesn't exist
    if not HISTORY_FILE.exists():
        HISTORY_FILE.touch()
        print(f"Created history file at {HISTORY_FILE}")
        
    # Create category folders for each country if they don't exist
    for country in COUNTRIES:
        country_dir = CATEGORIES_DIR / country
        if not country_dir.exists():
            country_dir.mkdir(parents=True, exist_ok=True)
            print(f"Created country directory: {country_dir}")
            
        # Create empty category files if they don't exist
        for category in CATEGORIES:
            category_file = country_dir / f"{category}.json"
            if not category_file.exists():
                with open(category_file, 'w', encoding='utf-8') as f:
                    f.write('[]')
                print(f"Created empty category file: {category_file}")
    
    # Register slash commands
    try:
        print("Registering slash commands...")
        # Shop Commands
        await bot.tree.sync()
        print("Slash commands registered successfully!")
    except Exception as e:
        print(f"Error registering slash commands: {e}")

@bot.command(name="money")
async def shop_money(ctx):
    """Command to open the money category shop"""
    await shop(ctx, "money")

@bot.command(name="‡πÄ‡∏á‡∏¥‡∏ô")
async def shop_money_th(ctx):
    """Command to open the money category shop (Thai)"""
    await shop(ctx, "money")

@bot.command(name="weapon")
async def shop_weapon(ctx):
    """Command to open the weapon category shop"""
    await shop(ctx, "weapon")
    
@bot.command(name="‡∏≠‡∏≤‡∏ß‡∏∏‡∏ò")
async def shop_weapon_th(ctx):
    """Command to open the weapon category shop (Thai)"""
    await shop(ctx, "weapon")

@bot.command(name="item")
async def shop_item(ctx):
    """Command to open the item category shop"""
    await shop(ctx, "item")
    
@bot.command(name="‡πÑ‡∏≠‡πÄ‡∏ó‡∏°")
async def shop_item_th(ctx):
    """Command to open the item category shop (Thai)"""
    await shop(ctx, "item")

@bot.command(name="story")
async def shop_story(ctx):
    """Command to open the story (combat items) category shop"""
    await shop(ctx, "story")
    
@bot.command(name="‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ", aliases=["‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ"])
async def shop_story_th(ctx):
    """Command to open the story (combat items) category shop (Thai)"""
    await shop(ctx, "story")

@bot.command(name="car")
async def shop_car(ctx):
    """Command to open the car category shop"""
    await shop(ctx, "car")
    
@bot.command(name="‡∏£‡∏ñ")
async def shop_car_th(ctx):
    """Command to open the car category shop (Thai)"""
    await shop(ctx, "car")

@bot.command(name="fashion")
async def shop_fashion(ctx):
    """Command to open the fashion category shop"""
    await shop(ctx, "fashion")
    
@bot.command(name="‡πÅ‡∏ü‡∏ä‡∏±‡πà‡∏ô")
async def shop_fashion_th(ctx):
    """Command to open the fashion category shop (Thai)"""
    await shop(ctx, "fashion")

@bot.command(name="‡πÄ‡∏ä‡πà‡∏≤‡∏£‡∏ñ")
async def shop_rentcar(ctx):
    """Command to open the car rental category shop"""
    await shop(ctx, "rentcar")

@bot.command(name="‡∏£‡πâ‡∏≤‡∏ô", aliases=["‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "shop"])
async def shop(ctx, ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏ß‡∏î: str = None, ‡∏´‡∏°‡∏ß‡∏î: str = None):
    """Command to open the shop
    
    Args:
        ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏ß‡∏î: Country or category name
        ‡∏´‡∏°‡∏ß‡∏î: Category name if first argument is country
    """
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏µ‡∏ö‡∏±‡∏Å
    print(f"shop command called with: ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏ß‡∏î={‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏ß‡∏î}, ‡∏´‡∏°‡∏ß‡∏î={‡∏´‡∏°‡∏ß‡∏î}")
    # ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏•‡∏¢ ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏Å‡πà‡∏≠‡∏ô
    if ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏ß‡∏î is None:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á view ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        view = discord.ui.View(timeout=None)
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®
        for i, country_code in enumerate(COUNTRIES):
            country_name = COUNTRY_NAMES[country_code]
            country_emoji = COUNTRY_EMOJIS.get(country_code, "üåè")
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® ‡∏Å‡∏≥‡∏´‡∏ô‡∏î row ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5 ‡∏õ‡∏∏‡πà‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏ñ‡∏ß
            button_row = 0 if i < 5 else 1
            country_button = discord.ui.Button(
                label=country_name,
                emoji=country_emoji,
                style=discord.ButtonStyle.primary,
                custom_id=f"country_{country_code}",
                row=button_row
            )
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á closure ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤ country_code ‡πÉ‡∏´‡πâ‡πÅ‡∏¢‡∏Å‡∏Å‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏∏‡πà‡∏°
            # ‡∏¢‡πâ‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á callback ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏µ‡∏Å‡∏ä‡∏±‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ closure
            def create_callback_for_country(country_value):
                async def button_callback(interaction):
                    # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "‡∏Å‡∏≤‡∏£‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß"
                    await interaction.response.defer()
                    
                    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏µ‡∏ö‡∏±‡∏Å
                    print(f"Selected country: {country_value}")
                    
                    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á shop ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÇ‡∏î‡∏¢‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®
                    await shop(ctx, country_value)
                    
                    # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®
                    await interaction.message.delete()
                    
                return button_callback
                
            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î callback ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ
            country_button.callback = create_callback_for_country(country_code)
            view.add_item(country_button)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®
        await ctx.send("üåè ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®:", view=view)
        return
    
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    country = "thailand"  # ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    category = "item"     # ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏≤‡∏£‡πå‡∏Å‡∏¥‡∏ß‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÅ‡∏£‡∏Å
    if ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏ß‡∏î:
        # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®
        if ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏ß‡∏î.lower() in COUNTRIES:
            country = ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏ß‡∏î.lower()
            # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏ô‡∏≠‡∏≤‡∏£‡πå‡∏Å‡∏¥‡∏ß‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á
            if ‡∏´‡∏°‡∏ß‡∏î and ‡∏´‡∏°‡∏ß‡∏î.lower() in CATEGORIES:
                category = ‡∏´‡∏°‡∏ß‡∏î.lower()
        # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
        elif ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏ß‡∏î.lower() in CATEGORIES:
            category = ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏ß‡∏î.lower()
        # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
        elif ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏ß‡∏î in ["‡πÄ‡∏á‡∏¥‡∏ô", "‡∏≠‡∏≤‡∏ß‡∏∏‡∏ò", "‡πÑ‡∏≠‡πÄ‡∏ó‡∏°", "‡∏£‡∏ñ", "‡πÅ‡∏ü‡∏ä‡∏±‡πà‡∏ô", "‡πÄ‡∏ä‡πà‡∏≤‡∏£‡∏ñ"]:
            # ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
            thai_to_eng = {"‡πÄ‡∏á‡∏¥‡∏ô": "money", "‡∏≠‡∏≤‡∏ß‡∏∏‡∏ò": "weapon", "‡πÑ‡∏≠‡πÄ‡∏ó‡∏°": "item", 
                          "‡∏£‡∏ñ": "car", "‡πÅ‡∏ü‡∏ä‡∏±‡πà‡∏ô": "fashion", "‡πÄ‡∏ä‡πà‡∏≤‡∏£‡∏ñ": "rentcar"}
            category = thai_to_eng[‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏ß‡∏î]
        # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
        elif ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏ß‡∏î in ["‡πÑ‡∏ó‡∏¢", "‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô", "‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤", "‡πÄ‡∏Å‡∏≤‡∏´‡∏•‡∏µ", "‡∏à‡∏µ‡∏ô"]:
            # ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
            thai_to_eng = {
                "‡πÑ‡∏ó‡∏¢": "thailand", 
                "‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô": "japan", 
                "‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤": "usa",
                "‡πÄ‡∏Å‡∏≤‡∏´‡∏•‡∏µ": "korea",
                "‡∏à‡∏µ‡∏ô": "china"
            }
            country = thai_to_eng[‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏ß‡∏î]
            # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏ô‡∏≠‡∏≤‡∏£‡πå‡∏Å‡∏¥‡∏ß‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á
            if ‡∏´‡∏°‡∏ß‡∏î and ‡∏´‡∏°‡∏ß‡∏î.lower() in CATEGORIES:
                category = ‡∏´‡∏°‡∏ß‡∏î.lower()
        else:
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏´‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏≤‡∏£‡πå‡∏Å‡∏¥‡∏ß‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            countries_str = ", ".join([f"`{COUNTRY_NAMES[c]}`" for c in COUNTRIES])
            categories_str = ", ".join([f"`{CATEGORY_NAMES[c]}`" for c in CATEGORIES])
            await ctx.send(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏\n‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏µ‡πà‡∏°‡∏µ: {countries_str}\n‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ: {categories_str}")
            return
    
    # ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
    products = load_products(country, category)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if not products:
        await ctx.send(f"‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® `{COUNTRY_NAMES[country]}` ‡∏´‡∏°‡∏ß‡∏î `{CATEGORY_NAMES[category]}`")
        return
    
    # ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÅ‡∏•‡∏∞‡∏ó‡∏∏‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
    all_products = []
    for c in COUNTRIES:
        for cat in CATEGORIES:
            c_products = load_products(c, cat)
            all_products.extend(c_products)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á view ‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
    view = CategoryShopView(CATEGORIES, current_category=category, country=country, showing_all_countries=False)
    
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ all_products ‡πÉ‡∏´‡πâ view
    view.all_products = all_products
    
    # ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    if not all_products:
        await ctx.send(f"‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡πâ‡∏≤‡∏ô")
        return
    
    # ‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    current_products = [p for p in all_products if p.get('country') == country and p.get('category') == category]
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if not current_products:
        await ctx.send(f"‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® `{COUNTRY_NAMES[country]}` ‡∏´‡∏°‡∏ß‡∏î `{CATEGORY_NAMES[category]}`")
        return
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    title = f"üõçÔ∏è ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® `{COUNTRY_NAMES[country]}` ‡∏´‡∏°‡∏ß‡∏î `{CATEGORY_NAMES[category]}`"
    await ctx.send(title, view=view)

@bot.command(name="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")
@commands.has_permissions(administrator=True)
async def add_multiple_products(ctx, *, ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: str):
    """Command to add multiple products at once, each on a new line (Admin only)"""
    try:
        # Split input by newlines
        lines = ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•.strip().split("\n")
        
        # Process each line as a product
        products_to_add = []
        error_lines = []
        
        for line_num, line in enumerate(lines, 1):
            # Skip empty lines
            if not line.strip():
                continue
                
            # Try to parse the line: format should be "emoji ‡∏ä‡∏∑‡πà‡∏≠ ‡∏£‡∏≤‡∏Ñ‡∏≤ ‡∏´‡∏°‡∏ß‡∏î ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®"
            parts = line.strip().split()
            
            if len(parts) < 3:
                error_lines.append(f"‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà {line_num}: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ [‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥ ‡∏ä‡∏∑‡πà‡∏≠ ‡∏£‡∏≤‡∏Ñ‡∏≤]")
                continue
                
            # First item is the emoji
            emoji = parts[0]
            
            # Last items might be country and category, if enough parts
            if len(parts) >= 5:
                country = parts[-1]
                category = parts[-2]
                # Extract name as everything between emoji and price/category/country
                name = " ".join(parts[1:-3])
                price_str = parts[-3]
            elif len(parts) >= 4:
                country = "1"  # Default country (1 = ‡πÑ‡∏ó‡∏¢)
                category = parts[-1]
                # Extract name as everything between emoji and price/category
                name = " ".join(parts[1:-2])
                price_str = parts[-2]
            else:
                # Default category and country if not provided
                country = "1"  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å "thailand" ‡πÄ‡∏õ‡πá‡∏ô "1"
                category = "item"
                # Name is everything between emoji and price
                name = " ".join(parts[1:-1])
                price_str = parts[-1]
            
            # Convert price to float (support decimal point)
            try:
                price = float(price_str)
            except ValueError:
                error_lines.append(f"‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà {line_num}: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏° ‡πÄ‡∏ä‡πà‡∏ô 99.50)")
                continue
                
            # Check if category is valid
            if category not in CATEGORIES:
                error_lines.append(f"‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà {line_num}: ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà '{category}' ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö: {', '.join(CATEGORIES)}")
                continue
                
            # Create product dictionary
            product = {
                "name": name,
                "price": price,
                "emoji": emoji,
                "category": category,
                "country": country  # ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            }
            
            products_to_add.append(product)
        
        # If no valid products, return
        if not products_to_add:
            await ctx.send("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤")
            if error_lines:
                error_msg = "\n".join(error_lines[:10])
                if len(error_lines) > 10:
                    error_msg += f"\n... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å {len(error_lines) - 10} ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î"
                await ctx.send(f"‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:\n```\n{error_msg}\n```")
            return
            
        # Add products using the batch function
        added_count, errors = batch_add_products(products_to_add)
        
        # Create response message
        if added_count > 0:
            embed = discord.Embed(
                title=f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à {added_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£",
                color=discord.Color.green()
            )
            
            # Add information about the products added
            added_details = []
            for product in products_to_add[:10]:  # Show up to 10 products
                added_details.append(f"{product['emoji']} {product['name']} - {product['price']:.2f}‡∏ø (‡∏´‡∏°‡∏ß‡∏î: {product['category']})")
                
            if added_details:
                if len(products_to_add) > 10:
                    added_details.append(f"... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å {len(products_to_add) - 10} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
                    
                embed.add_field(
                    name="üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°",
                    value="\n".join(added_details),
                    inline=False
                )
            
            # Add error information if any
            if errors or error_lines:
                # Make sure errors is a list before concatenating
                errors_list = errors if isinstance(errors, list) else [errors] if errors else []
                all_errors = error_lines + errors_list
                error_text = "\n".join([f"- {error}" for error in all_errors[:10]])
                if len(all_errors) > 10:
                    error_text += f"\n... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å {len(all_errors) - 10} ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î"
                    
                embed.add_field(
                    name="‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô",
                    value=error_text,
                    inline=False
                )
            
            await ctx.send(embed=embed)
        else:
            embed = discord.Embed(
                title="‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ",
                color=discord.Color.red()
            )
            
            # Add error information
            # Make sure errors is a list before concatenating
            errors_list = errors if isinstance(errors, list) else [errors] if errors else []
            all_errors = error_lines + errors_list
            if all_errors:
                error_text = "\n".join([f"- {error}" for error in all_errors[:10]])
                if len(all_errors) > 10:
                    error_text += f"\n... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å {len(all_errors) - 10} ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î"
                    
                embed.add_field(
                    name="‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
                    value=error_text,
                    inline=False
                )
                
            # Add format example
            embed.add_field(
                name="üìù ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡πÅ‡∏ö‡∏ö‡πÅ‡∏¢‡∏Å‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î)",
                value="```\nüî´ ‡∏õ‡∏∑‡∏ô‡∏•‡∏π‡∏Å‡∏ã‡∏≠‡∏á 15000 weapon\nüöó ‡∏£‡∏ñ‡πÄ‡∏ö‡∏ô‡∏ã‡πå 50000 car\n```",
                inline=False
            )
                
            await ctx.send(embed=embed)
            
    except Exception as e:
        await ctx.send(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")

@bot.command(name="‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")
@commands.has_permissions(administrator=True)
async def remove_product(ctx, ‡∏ä‡∏∑‡πà‡∏≠: str, ‡∏´‡∏°‡∏ß‡∏î: str = None, ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®: str = "1"):
    """Command to remove a product (Admin only)
    
    Args:
        ‡∏ä‡∏∑‡πà‡∏≠: ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö
        ‡∏´‡∏°‡∏ß‡∏î: ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà (‡∏ñ‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏∞‡∏•‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏ô‡∏µ‡πâ)
        ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®: ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏µ‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 1-5 ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÄ‡∏î‡∏¥‡∏°)
    """
    try:
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
        if ‡∏´‡∏°‡∏ß‡∏î:
            if ‡∏´‡∏°‡∏ß‡∏î in ["‡πÄ‡∏á‡∏¥‡∏ô", "‡∏≠‡∏≤‡∏ß‡∏∏‡∏ò", "‡πÑ‡∏≠‡πÄ‡∏ó‡∏°", "‡∏£‡∏ñ", "‡πÅ‡∏ü‡∏ä‡∏±‡πà‡∏ô", "‡πÄ‡∏ä‡πà‡∏≤‡∏£‡∏ñ"]:
                thai_to_eng = {"‡πÄ‡∏á‡∏¥‡∏ô": "money", "‡∏≠‡∏≤‡∏ß‡∏∏‡∏ò": "weapon", "‡πÑ‡∏≠‡πÄ‡∏ó‡∏°": "item", 
                              "‡∏£‡∏ñ": "car", "‡πÅ‡∏ü‡∏ä‡∏±‡πà‡∏ô": "fashion", "‡πÄ‡∏ä‡πà‡∏≤‡∏£‡∏ñ": "rentcar"}
                ‡∏´‡∏°‡∏ß‡∏î = thai_to_eng.get(‡∏´‡∏°‡∏ß‡∏î, ‡∏´‡∏°‡∏ß‡∏î)
                
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡∏°‡∏ß‡∏î‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            if ‡∏´‡∏°‡∏ß‡∏î not in CATEGORIES:
                categories_str = ", ".join([f"`{cat}`" for cat in CATEGORIES])
                await ctx.send(f"‚ùå ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà '{‡∏´‡∏°‡∏ß‡∏î}' ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö: {categories_str}")
                return
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®
        if ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® in ["‡πÑ‡∏ó‡∏¢", "‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô", "‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤", "‡πÄ‡∏Å‡∏≤‡∏´‡∏•‡∏µ", "‡∏à‡∏µ‡∏ô"]:
            thai_to_code = {"‡πÑ‡∏ó‡∏¢": "1", "‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô": "2", "‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤": "3", "‡πÄ‡∏Å‡∏≤‡∏´‡∏•‡∏µ": "4", "‡∏à‡∏µ‡∏ô": "5"}
            ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® = thai_to_code[‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®]
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
        elif ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® in COUNTRY_CODES:
            ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® = COUNTRY_CODES[‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®]
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        if ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® not in COUNTRIES:
            countries_str = ", ".join([f"`{COUNTRY_NAMES[c]}`" for c in COUNTRIES])
            await ctx.send(f"‚ùå ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö: {countries_str}")
            return
        
        if ‡∏´‡∏°‡∏ß‡∏î:
            # ‡∏ñ‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏ß‡∏î ‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏´‡∏°‡∏ß‡∏î‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
            products = load_products(‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®, ‡∏´‡∏°‡∏ß‡∏î)
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            product_to_delete = next((p for p in products if p["name"] == ‡∏ä‡∏∑‡πà‡∏≠), None)
            if not product_to_delete:
                await ctx.send(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ '{‡∏ä‡∏∑‡πà‡∏≠}' ‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î '{CATEGORY_NAMES.get(‡∏´‡∏°‡∏ß‡∏î, ‡∏´‡∏°‡∏ß‡∏î)}' ‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® '{COUNTRY_NAMES[‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®]}'")
                return
            
            # ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
            products = [p for p in products if p["name"] != ‡∏ä‡∏∑‡πà‡∏≠]
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
            save_products(products, ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®, ‡∏´‡∏°‡∏ß‡∏î)
            
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏ü‡∏•‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏î‡πâ‡∏ß‡∏¢ (‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®)
            all_products = load_products(‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®)
            all_products = [p for p in all_products if not (p["name"] == ‡∏ä‡∏∑‡πà‡∏≠ and p.get("category") == ‡∏´‡∏°‡∏ß‡∏î)]
            save_products(all_products, ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®)
            
            await ctx.send(f"üóëÔ∏è ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ '{‡∏ä‡∏∑‡πà‡∏≠}' ‡∏à‡∏≤‡∏Å‡∏´‡∏°‡∏ß‡∏î '{CATEGORY_NAMES.get(‡∏´‡∏°‡∏ß‡∏î, ‡∏´‡∏°‡∏ß‡∏î)}' ‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® '{COUNTRY_NAMES[‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®]}' ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
        else:
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏ß‡∏î ‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
            products = load_products(‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®)
            
            # ‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö
            products_to_delete = [p for p in products if p["name"] == ‡∏ä‡∏∑‡πà‡∏≠]
            if not products_to_delete:
                await ctx.send(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ '{‡∏ä‡∏∑‡πà‡∏≠}' ‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® '{COUNTRY_NAMES[‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®]}'")
                return
            
            # ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö
            categories_to_update = set(p.get("category", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏ß‡∏î") for p in products_to_delete)
            
            # ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®
            updated_products = [p for p in products if p["name"] != ‡∏ä‡∏∑‡πà‡∏≠]
            save_products(updated_products, ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®)
            
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏î‡πâ‡∏ß‡∏¢
            for category in categories_to_update:
                if category in CATEGORIES:
                    category_products = load_products(‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®, category)
                    category_products = [p for p in category_products if p["name"] != ‡∏ä‡∏∑‡πà‡∏≠]
                    save_products(category_products, ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®, category)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏•‡∏ö
            categories_str = ", ".join([f"'{CATEGORY_NAMES.get(cat, cat)}'" for cat in categories_to_update if cat in CATEGORIES])
            if categories_str:
                await ctx.send(f"üóëÔ∏è ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ '{‡∏ä‡∏∑‡πà‡∏≠}' ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {len(products_to_delete)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏´‡∏°‡∏ß‡∏î {categories_str} ‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® '{COUNTRY_NAMES[‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®]}' ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
            else:
                await ctx.send(f"üóëÔ∏è ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ '{‡∏ä‡∏∑‡πà‡∏≠}' ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {len(products_to_delete)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® '{COUNTRY_NAMES[‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®]}' ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
    except Exception as e:
        await ctx.send(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")

@bot.command(name="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")
@commands.has_permissions(administrator=True)
async def edit_product(ctx, ‡∏ä‡∏∑‡πà‡∏≠: str, ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®: str = "1", ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡πÉ‡∏´‡∏°‡πà: str = None, ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà: str = None, ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏´‡∏°‡πà: float = None, ‡∏´‡∏°‡∏ß‡∏î‡πÉ‡∏´‡∏°‡πà: str = None, ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÉ‡∏´‡∏°‡πà: str = None):
    """Command to edit a product (Admin only)
    
    Args:
        ‡∏ä‡∏∑‡πà‡∏≠: ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
        ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®: ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏µ‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (1=‡πÑ‡∏ó‡∏¢, 2=‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô, 3=‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤, 4=‡πÄ‡∏Å‡∏≤‡∏´‡∏•‡∏µ, 5=‡∏à‡∏µ‡∏ô)
        ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡πÉ‡∏´‡∏°‡πà: ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô)
        ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà: ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô)
        ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏´‡∏°‡πà: ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô)
        ‡∏´‡∏°‡∏ß‡∏î‡πÉ‡∏´‡∏°‡πà: ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô)
        ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÉ‡∏´‡∏°‡πà: ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡πâ‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®)
    """
    try:
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®
        if ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® in ["‡πÑ‡∏ó‡∏¢", "‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô", "‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤", "‡πÄ‡∏Å‡∏≤‡∏´‡∏•‡∏µ", "‡∏à‡∏µ‡∏ô"]:
            thai_to_code = {"‡πÑ‡∏ó‡∏¢": "1", "‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô": "2", "‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤": "3", "‡πÄ‡∏Å‡∏≤‡∏´‡∏•‡∏µ": "4", "‡∏à‡∏µ‡∏ô": "5"}
            ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® = thai_to_code[‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®]
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
        elif ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® in COUNTRY_CODES:
            ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® = COUNTRY_CODES[‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®]
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        if ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® not in COUNTRIES:
            countries_str = ", ".join([f"`{COUNTRY_NAMES[c]}`" for c in COUNTRIES])
            await ctx.send(f"‚ùå ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö: {countries_str}")
            return
            
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÉ‡∏´‡∏°‡πà (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏)
        if ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÉ‡∏´‡∏°‡πà:
            # ‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÉ‡∏´‡∏°‡πà‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®
            if ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÉ‡∏´‡∏°‡πà in ["‡πÑ‡∏ó‡∏¢", "‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô", "‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤", "‡πÄ‡∏Å‡∏≤‡∏´‡∏•‡∏µ", "‡∏à‡∏µ‡∏ô"]:
                thai_to_code = {"‡πÑ‡∏ó‡∏¢": "1", "‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô": "2", "‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤": "3", "‡πÄ‡∏Å‡∏≤‡∏´‡∏•‡∏µ": "4", "‡∏à‡∏µ‡∏ô": "5"}
                ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÉ‡∏´‡∏°‡πà = thai_to_code[‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÉ‡∏´‡∏°‡πà]
            # ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
            elif ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÉ‡∏´‡∏°‡πà in COUNTRY_CODES:
                ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÉ‡∏´‡∏°‡πà = COUNTRY_CODES[‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÉ‡∏´‡∏°‡πà]
                
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÉ‡∏´‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            if ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÉ‡∏´‡∏°‡πà not in COUNTRIES:
                countries_str = ", ".join([f"`{COUNTRY_NAMES[c]}`" for c in COUNTRIES])
                await ctx.send(f"‚ùå ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö: {countries_str}")
                return
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏´‡∏°‡πà (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏)
        if ‡∏´‡∏°‡∏ß‡∏î‡πÉ‡∏´‡∏°‡πà:
            # ‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
            if ‡∏´‡∏°‡∏ß‡∏î‡πÉ‡∏´‡∏°‡πà in ["‡πÄ‡∏á‡∏¥‡∏ô", "‡∏≠‡∏≤‡∏ß‡∏∏‡∏ò", "‡πÑ‡∏≠‡πÄ‡∏ó‡∏°", "‡∏£‡∏ñ", "‡πÅ‡∏ü‡∏ä‡∏±‡πà‡∏ô", "‡πÄ‡∏ä‡πà‡∏≤‡∏£‡∏ñ"]:
                thai_to_eng = {"‡πÄ‡∏á‡∏¥‡∏ô": "money", "‡∏≠‡∏≤‡∏ß‡∏∏‡∏ò": "weapon", "‡πÑ‡∏≠‡πÄ‡∏ó‡∏°": "item", 
                              "‡∏£‡∏ñ": "car", "‡πÅ‡∏ü‡∏ä‡∏±‡πà‡∏ô": "fashion", "‡πÄ‡∏ä‡πà‡∏≤‡∏£‡∏ñ": "rentcar"}
                ‡∏´‡∏°‡∏ß‡∏î‡πÉ‡∏´‡∏°‡πà = thai_to_eng[‡∏´‡∏°‡∏ß‡∏î‡πÉ‡∏´‡∏°‡πà]
                
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏´‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            if ‡∏´‡∏°‡∏ß‡∏î‡πÉ‡∏´‡∏°‡πà.lower() not in CATEGORIES:
                categories_str = ", ".join([f"`{CATEGORY_NAMES[c]}`" for c in CATEGORIES])
                await ctx.send(f"‚ùå ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö: {categories_str}")
                return
                
            # ‡πÉ‡∏ä‡πâ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
            ‡∏´‡∏°‡∏ß‡∏î‡πÉ‡∏´‡∏°‡πà = ‡∏´‡∏°‡∏ß‡∏î‡πÉ‡∏´‡∏°‡πà.lower()
        
        # ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
        products = load_products(‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        found = False
        for product in products:
            if product["name"] == ‡∏ä‡∏∑‡πà‡∏≠:
                found = True
                
                # Update product details if provided
                if ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà:
                    product["name"] = ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà
                if ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏´‡∏°‡πà is not None:
                    product["price"] = ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏´‡∏°‡πà
                if ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡πÉ‡∏´‡∏°‡πà:
                    product["emoji"] = ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡πÉ‡∏´‡∏°‡πà
                if ‡∏´‡∏°‡∏ß‡∏î‡πÉ‡∏´‡∏°‡πà:
                    product["category"] = ‡∏´‡∏°‡∏ß‡∏î‡πÉ‡∏´‡∏°‡πà
                # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÉ‡∏´‡∏°‡πà ‡πÉ‡∏´‡πâ‡∏Ñ‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô
                # ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏¢‡πâ‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÉ‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á
                
                break
        
        if not found:
            await ctx.send(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ '{‡∏ä‡∏∑‡πà‡∏≠}' ‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® {COUNTRY_NAMES[‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®]}")
            return
            
        # Get the original category and the new category if changed
        original_product = next((p for p in products if p["name"] == (‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà if ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà else ‡∏ä‡∏∑‡πà‡∏≠)), None)
        if original_product:
            original_category = original_product.get("category", "")
            
            # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏¢‡πâ‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®
            if ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÉ‡∏´‡∏°‡πà and ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÉ‡∏´‡∏°‡πà != ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®:
                # 1. ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÄ‡∏î‡∏¥‡∏°
                products = [p for p in products if p["name"] != (‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà if ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà else ‡∏ä‡∏∑‡πà‡∏≠)]
                save_products(products, ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®)
                
                # ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÄ‡∏î‡∏¥‡∏°
                if original_category in CATEGORIES:
                    category_products = load_products(‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®, original_category)
                    category_products = [p for p in category_products if p["name"] != ‡∏ä‡∏∑‡πà‡∏≠]
                    save_products(category_products, ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®, original_category)
                
                # 2. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÉ‡∏´‡∏°‡πà
                # ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÉ‡∏´‡∏°‡πà
                new_country_products = load_products(‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÉ‡∏´‡∏°‡πà)
                
                # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
                original_product["country"] = ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÉ‡∏´‡∏°‡πà
                
                # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡∏á‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÉ‡∏´‡∏°‡πà
                new_country_products.append(original_product)
                
                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÉ‡∏´‡∏°‡πà
                save_products(new_country_products, ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÉ‡∏´‡∏°‡πà)
                
                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÉ‡∏´‡∏°‡πà
                save_product_to_category(original_product)
                
                # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÉ‡∏´‡∏°‡πà (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
                ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® = ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÉ‡∏´‡∏°‡πà
            else:
                # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏¢‡πâ‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÄ‡∏î‡∏¥‡∏°
                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®
                save_products(products, ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®)
                
                # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
                if ‡∏´‡∏°‡∏ß‡∏î‡πÉ‡∏´‡∏°‡πà and ‡∏´‡∏°‡∏ß‡∏î‡πÉ‡∏´‡∏°‡πà != original_category:
                    # 1. ‡∏•‡∏ö‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏î‡∏¥‡∏°
                    if original_category in CATEGORIES:
                        category_products = load_products(‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®, original_category)
                        category_products = [p for p in category_products if p["name"] != ‡∏ä‡∏∑‡πà‡∏≠]
                        save_products(category_products, ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®, original_category)
                    
                    # 2. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏´‡∏°‡πà
                    if ‡∏´‡∏°‡∏ß‡∏î‡πÉ‡∏´‡∏°‡πà in CATEGORIES:
                        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
                        original_product["category"] = ‡∏´‡∏°‡∏ß‡∏î‡πÉ‡∏´‡∏°‡πà
                        original_product["country"] = ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®
                        save_product_to_category(original_product)
                else:
                    # ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏î‡∏¥‡∏° ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏ü‡∏•‡πå
                    if original_category in CATEGORIES:
                        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
                        original_product["category"] = original_category
                        original_product["country"] = ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®
                        save_product_to_category(original_product)
        
        product_name = ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà if ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà else ‡∏ä‡∏∑‡πà‡∏≠
        await ctx.send(f"‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ '{‡∏ä‡∏∑‡πà‡∏≠}' ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
        
        # Show updated product details
        # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏¢‡πâ‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® ‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÉ‡∏´‡∏°‡πà
        if ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÉ‡∏´‡∏°‡πà and ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÉ‡∏´‡∏°‡πà != ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®:
            updated_products = load_products(‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÉ‡∏´‡∏°‡πà)
        else:
            updated_products = products
            
        product = next((p for p in updated_products if p["name"] == product_name), None)
        if product:
            embed = discord.Embed(title="‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï", color=0x00ff00)
            embed.add_field(name="‡∏ä‡∏∑‡πà‡∏≠", value=product["name"], inline=True)
            embed.add_field(name="‡∏£‡∏≤‡∏Ñ‡∏≤", value=f"{product['price']:.2f}‡∏ø", inline=True)
            embed.add_field(name="‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥", value=product["emoji"], inline=True)
            embed.add_field(name="‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà", value=CATEGORY_NAMES.get(product.get("category", ""), product.get("category", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏ß‡∏î")), inline=True)
            embed.add_field(name="‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®", value=COUNTRY_NAMES.get(product.get("country", "thailand"), "‡πÑ‡∏ó‡∏¢"), inline=True)
            await ctx.send(embed=embed)
            
    except Exception as e:
        await ctx.send(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")

@bot.command(name="‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
async def list_products(ctx, ‡∏´‡∏°‡∏ß‡∏î: str = None):
    """Command to list all products"""
    products = load_products(‡∏´‡∏°‡∏ß‡∏î)
    if not products:
        await ctx.send("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡πâ‡∏≤‡∏ô")
        return
    
    # Check if category is valid
    if ‡∏´‡∏°‡∏ß‡∏î and ‡∏´‡∏°‡∏ß‡∏î not in CATEGORIES:
        categories_str = ", ".join([f"`{CATEGORY_NAMES[cat]}`" for cat in CATEGORIES])
        await ctx.send(f"‚ùå ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ: {categories_str}")
        return
    
    # Filter products by category if specified
    if ‡∏´‡∏°‡∏ß‡∏î:
        filtered_products = [p for p in products if p.get('category', '') == ‡∏´‡∏°‡∏ß‡∏î]
        if not filtered_products:
            await ctx.send(f"‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î `{‡∏´‡∏°‡∏ß‡∏î}`")
            return
        products = filtered_products
        embed_title = f"üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î '{‡∏´‡∏°‡∏ß‡∏î}'"
    else:
        # Group products by category
        categories = {}
        for product in products:
            category = product.get('category', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏ß‡∏î')
            if category not in categories:
                categories[category] = []
            categories[category].append(product)
        
        embed_title = "üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î)"
        embed = discord.Embed(title=embed_title, color=0x3498db)
        
        # Add category sections
        for category, category_products in categories.items():
            product_list = []
            for product in category_products:
                product_list.append(f"{product['emoji']} {product['name']} - {product['price']:.2f}‡∏ø")
            
            # Join products with newlines
            value = "\n".join(product_list) if product_list else "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"
            
            # Add field for this category
            embed.add_field(
                name=f"üè∑Ô∏è {category.upper()}",
                value=value,
                inline=False
            )
        
        await ctx.send(embed=embed)
        return
    
    # Show products for a specific category
    embed = discord.Embed(title=embed_title, color=0x3498db)
    
    for product in products:
        embed.add_field(
            name=f"{product['emoji']} {product['name']}",
            value=f"‡∏£‡∏≤‡∏Ñ‡∏≤: {product['price']:.2f}‡∏ø",
            inline=True
        )
    
    await ctx.send(embed=embed)

@bot.command(name="‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥")
@commands.has_permissions(administrator=True)
async def history(ctx, ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: int = 5):
    """Command to view purchase history (Admin only)"""
    try:
        if not HISTORY_FILE.exists() or HISTORY_FILE.stat().st_size == 0:
            await ctx.send("‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠")
            return
            
        with open(HISTORY_FILE, "r", encoding="utf-8") as f:
            lines = f.readlines()
            
        if not lines:
            await ctx.send("‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠")
            return
            
        # Get the last N entries
        entries = lines[-‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:] if ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô > 0 else lines
            
        embed = discord.Embed(title="üìú ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠", color=0x00ff00)
        for line in entries:
            try:
                d = json.loads(line)
                dt = datetime.fromisoformat(d['timestamp'])
                formatted_time = dt.strftime("%d/%m/%Y %H:%M")
                summary = ", ".join([f"{x['name']} x{x['qty']}" for x in d['items']])
                embed.add_field(
                    name=f"üë§ {d['user']} ({formatted_time})",
                    value=f"{summary} = {d['total']}‡∏ø",
                    inline=False
                )
            except (json.JSONDecodeError, KeyError) as e:
                continue
                
        await ctx.send(embed=embed)
    except Exception as e:
        await ctx.send(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")

@bot.command(name="‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
@commands.has_permissions(administrator=True)
async def delete_all_products_command(ctx):
    """Command to delete all products from all categories in all countries completely (Admin only)"""
    try:
        # Create confirmation message
        confirm_embed = discord.Embed(
            title="‚ö†Ô∏è ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
            description="‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÅ‡∏•‡∏∞‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÇ‡∏î‡∏¢‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå\n**‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏î‡πâ**",
            color=discord.Color.red()
        )
        
        # Create confirmation buttons
        class ConfirmView(discord.ui.View):
            def __init__(self):
                super().__init__(timeout=60)  # Timeout after 60 seconds
                
            @discord.ui.button(label="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö", style=discord.ButtonStyle.danger)
            async def confirm_button(self, button_interaction: discord.Interaction, button: discord.ui.Button):
                if button_interaction.user.id != ctx.author.id:
                    await button_interaction.response.send_message("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ", ephemeral=True)
                    return
                    
                success = delete_all_products()
                
                if success:
                    await button_interaction.response.edit_message(
                        content="‚úÖ ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÅ‡∏•‡∏∞‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
                        embed=None,
                        view=None
                    )
                else:
                    await button_interaction.response.edit_message(
                        content="‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
                        embed=None,
                        view=None
                    )
                
            @discord.ui.button(label="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", style=discord.ButtonStyle.secondary)
            async def cancel_button(self, button_interaction: discord.Interaction, button: discord.ui.Button):
                if button_interaction.user.id != ctx.author.id:
                    await button_interaction.response.send_message("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ", ephemeral=True)
                    return
                    
                await button_interaction.response.edit_message(
                    content="‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
                    embed=None,
                    view=None
                )
                
        # Send the confirmation message with buttons
        confirm_view = ConfirmView()
        await ctx.send(embed=confirm_embed, view=confirm_view)
            
    except Exception as e:
        await ctx.send(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")

@bot.command(name="‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", aliases=["noitems", "no_items"])
@commands.has_permissions(administrator=True)
async def add_no_product_placeholders_command(ctx):
    """Command to add '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤' placeholders to empty categories in all countries (Admin only)"""
    try:
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ placeholder ‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤
        added_count = add_no_product_placeholders()
        
        if added_count > 0:
            await ctx.send(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤' ‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß {added_count} ‡∏´‡∏°‡∏ß‡∏î")
        else:
            await ctx.send("‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏°‡∏ß‡∏î‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤ ‡∏ó‡∏∏‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
            
    except Exception as e:
        await ctx.send(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")

@bot.command(name="‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏°‡∏ß‡∏î")
@commands.has_permissions(administrator=True)
async def clear_category_command(ctx, *, ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: str = None):
    """Command to clear all products from a category (Admin only)
    
    Args:
        ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏ß‡∏î‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö "‡∏´‡∏°‡∏ß‡∏î ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®" ‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏•‡∏≤‡∏¢‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
               ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® ‡∏à‡∏∞‡∏•‡∏ö‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®
    """
    try:
        if not ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:
            await ctx.send("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö ‡πÄ‡∏ä‡πà‡∏ô `!‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏°‡∏ß‡∏î money` ‡∏´‡∏£‡∏∑‡∏≠ `!‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏°‡∏ß‡∏î money 1`")
            return
        
        # ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏¢‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
        lines = ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•.strip().split('\n')
        total_categories = len(lines)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        invalid_categories = []
        categories_to_clear = []
        
        for line in lines:
            parts = line.strip().split()
            ‡∏´‡∏°‡∏ß‡∏î = parts[0] if parts else ""
            ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® = parts[1] if len(parts) > 1 else None
            
            if ‡∏´‡∏°‡∏ß‡∏î not in CATEGORIES:
                invalid_categories.append(‡∏´‡∏°‡∏ß‡∏î)
            else:
                if ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® and ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® not in COUNTRIES:
                    await ctx.send(f"‚ùå ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® `{‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®}` ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏µ‡πà‡∏°‡∏µ: 1, 2, 3, 4, 5")
                    return
                categories_to_clear.append((‡∏´‡∏°‡∏ß‡∏î, ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®))
        
        if invalid_categories:
            categories_str = ", ".join([f"`{CATEGORY_NAMES.get(cat, cat)}`" for cat in CATEGORIES])
            await ctx.send(f"‚ùå ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà `{'`, `'.join(invalid_categories)}` ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ: {categories_str}")
            return
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
        description_lines = []
        for ‡∏´‡∏°‡∏ß‡∏î, ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® in categories_to_clear:
            category_name = CATEGORY_NAMES.get(‡∏´‡∏°‡∏ß‡∏î, ‡∏´‡∏°‡∏ß‡∏î)
            if ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®:
                country_name = COUNTRY_NAMES.get(‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®, ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®)
                description_lines.append(f"- ‡∏´‡∏°‡∏ß‡∏î **{category_name}** ‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® **{country_name}**")
            else:
                description_lines.append(f"- ‡∏´‡∏°‡∏ß‡∏î **{category_name}** ‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®")
        
        # Create confirmation message
        confirm_embed = discord.Embed(
            title="‚ö†Ô∏è ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
            description=f"‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ:\n" + "\n".join(description_lines) + "\n\n**‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏î‡πâ**",
            color=discord.Color.red()
        )
        
        # Create confirmation buttons
        class ConfirmView(discord.ui.View):
            def __init__(self):
                super().__init__(timeout=60)  # Timeout after 60 seconds
                
            @discord.ui.button(label="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö", style=discord.ButtonStyle.danger)
            async def confirm_button(self, button_interaction: discord.Interaction, button: discord.ui.Button):
                if button_interaction.user.id != ctx.author.id:
                    await button_interaction.response.send_message("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ", ephemeral=True)
                    return
                
                success_count = 0
                failed_categories = []
                
                for ‡∏´‡∏°‡∏ß‡∏î, ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® in categories_to_clear:
                    if clear_category_products(‡∏´‡∏°‡∏ß‡∏î, ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®):
                        success_count += 1
                    else:
                        failed_categories.append((‡∏´‡∏°‡∏ß‡∏î, ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®))
                
                if success_count == len(categories_to_clear):
                    await button_interaction.response.edit_message(
                        content="‚úÖ ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
                        embed=None,
                        view=None
                    )
                elif success_count > 0:
                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏ó‡∏µ‡πà‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
                    fail_message = []
                    for ‡∏´‡∏°‡∏ß‡∏î, ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® in failed_categories:
                        category_name = CATEGORY_NAMES.get(‡∏´‡∏°‡∏ß‡∏î, ‡∏´‡∏°‡∏ß‡∏î)
                        if ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®:
                            country_name = COUNTRY_NAMES.get(‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®, ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®)
                            fail_message.append(f"- ‡∏´‡∏°‡∏ß‡∏î **{category_name}** ‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® **{country_name}**")
                        else:
                            fail_message.append(f"- ‡∏´‡∏°‡∏ß‡∏î **{category_name}** ‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®")
                    
                    await button_interaction.response.edit_message(
                        content=f"‚ö†Ô∏è ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô ({success_count}/{len(categories_to_clear)})\n\n‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö:\n" + "\n".join(fail_message),
                        embed=None,
                        view=None
                    )
                else:
                    await button_interaction.response.edit_message(
                        content="‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ",
                        embed=None,
                        view=None
                    )
                
            @discord.ui.button(label="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", style=discord.ButtonStyle.secondary)
            async def cancel_button(self, button_interaction: discord.Interaction, button: discord.ui.Button):
                if button_interaction.user.id != ctx.author.id:
                    await button_interaction.response.send_message("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ", ephemeral=True)
                    return
                    
                await button_interaction.response.edit_message(
                    content="‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
                    embed=None,
                    view=None
                )
        
        # Send confirmation message with buttons
        await ctx.send(embed=confirm_embed, view=ConfirmView())
            
    except Exception as e:
        await ctx.send(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")

@bot.command(name="‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô")
async def admin_examples_command(ctx):
    """Command to display admin command examples"""
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
    if not ctx.author.guild_permissions.administrator:
        await ctx.send("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏• (Administrator)")
        return
        
    # ‡∏£‡∏±‡∏ö embeds ‡∏à‡∏≤‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô (‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏õ‡πá‡∏ô list ‡∏Ç‡∏≠‡∏á embeds)
    embeds = create_admin_examples_embed()
    
    # ‡∏™‡πà‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ embed ‡∏ó‡∏µ‡∏•‡∏∞‡∏ï‡∏±‡∏ß
    for i, embed in enumerate(embeds):
        # ‡∏™‡πà‡∏á embed ‡πÅ‡∏£‡∏Å‡πÅ‡∏ö‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏™‡πà‡∏ß‡∏ô embed ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏ö‡∏ö‡πÉ‡∏ä‡πâ reply
        if i == 0:
            message = await ctx.send(embed=embed)
        else:
            # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ö‡∏ö‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏Å ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ embeds ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô
            await ctx.send(embed=embed, reference=message)

@bot.command(name="‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠")
async def help_command(ctx):
    """Command to display help information"""
    embed = discord.Embed(title="üìö ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤", color=0x4f0099)
    
    # General commands
    embed.add_field(
        name="üõí ‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤",
        value="‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á `!‡∏£‡πâ‡∏≤‡∏ô`, `!shop` ‡∏´‡∏£‡∏∑‡∏≠ `/‡∏£‡πâ‡∏≤‡∏ô` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤\n‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏î‡∏π‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: `!‡∏£‡πâ‡∏≤‡∏ô ‡πÄ‡∏á‡∏¥‡∏ô`, `!‡∏£‡πâ‡∏≤‡∏ô ‡∏≠‡∏≤‡∏ß‡∏∏‡∏ò`, `!‡∏£‡πâ‡∏≤‡∏ô ‡πÑ‡∏≠‡πÄ‡∏ó‡∏°`, `!‡∏£‡πâ‡∏≤‡∏ô ‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ`",
        inline=False
    )
    
    embed.add_field(
        name="üìã ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
        value="‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á `!‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î`, `!‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤` ‡∏´‡∏£‡∏∑‡∏≠ `/‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
        inline=False
    )

    embed.add_field(
        name="üìù ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£",
        value=(
            "‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á `!‡∏™‡∏±‡πà‡∏á‡∏Ç‡∏≠‡∏á` ‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö:<‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®> <‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤> <‡∏à‡∏≥‡∏ô‡∏ß‡∏ô>\n\n"
            "‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:\n"
            "```!‡∏™‡∏±‡πà‡∏á‡∏Ç‡∏≠‡∏á\n"
            "1 ‡∏ä‡∏∏‡∏î‡πÄ‡∏Å‡∏≤‡∏∞‡∏°‡∏ß‡∏¢‡πÑ‡∏ó‡∏¢ 5\n"
            "1 ‡∏ú‡πâ‡∏≤‡∏û‡∏±‡∏ô‡∏°‡∏∑‡∏≠‡∏°‡∏ß‡∏¢‡πÑ‡∏ó‡∏¢ 2\n"
            "2 ‡∏ä‡∏∏‡∏î‡∏Å‡∏¥‡πÇ‡∏°‡πÇ‡∏ô 3```\n\n"
            "‚Ä¢ <‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®> ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 1-5 ‡πÅ‡∏ó‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®"
        ),
        inline=False
    )
    
    # Admin commands
    embed.add_field(
        name="üíæ ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
        value="‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á `!saveall` ‡∏´‡∏£‡∏∑‡∏≠ `!‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô)",
        inline=False
    )
    
    # Admin commands
    embed.add_field(
        name="üëë ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô",
        value="‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á `!‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
        inline=False
    )
    
    await ctx.send(embed=embed)

# ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
@bot.command(name="‡∏™‡∏±‡πà‡∏á‡∏Ç‡∏≠‡∏á", aliases=["order", "ordermany"])
async def order_many_command(ctx):
    """Command to order multiple items with quantities in text format"""
    # ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
    message_content = ctx.message.content
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    command_parts = message_content.split("\n", 1)
    if len(command_parts) < 2:
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ
        usage_embed = discord.Embed(
            title="üìù ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏±‡πà‡∏á‡∏Ç‡∏≠‡∏á",
            description="‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á `!‡∏™‡∏±‡πà‡∏á‡∏Ç‡∏≠‡∏á` ‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ñ‡∏±‡∏î‡πÑ‡∏õ",
            color=discord.Color.blue()
        )
        
        usage_embed.add_field(
            name="‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö",
            value=(
                "‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: `<‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®> <‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤> <‡∏à‡∏≥‡∏ô‡∏ß‡∏ô>`\n\n"
                "‚Ä¢ <‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®> ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 1-5 ‡πÅ‡∏ó‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®\n"
                "‚Ä¢ <‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤> ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤\n"
                "‚Ä¢ <‡∏à‡∏≥‡∏ô‡∏ß‡∏ô> ‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠"
            ),
            inline=False
        )
        
        usage_embed.add_field(
            name="‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á",
            value=(
                "```!‡∏™‡∏±‡πà‡∏á‡∏Ç‡∏≠‡∏á\n"
                "1 ‡∏ä‡∏∏‡∏î‡πÄ‡∏Å‡∏≤‡∏∞‡∏°‡∏ß‡∏¢‡πÑ‡∏ó‡∏¢ 5\n"
                "1 ‡∏ú‡πâ‡∏≤‡∏û‡∏±‡∏ô‡∏°‡∏∑‡∏≠‡∏°‡∏ß‡∏¢‡πÑ‡∏ó‡∏¢ 2\n"
                "2 ‡∏ä‡∏∏‡∏î‡∏Å‡∏¥‡πÇ‡∏°‡πÇ‡∏ô 3```"
            ),
            inline=False
        )
        
        await ctx.send(embed=usage_embed)
        return
    
    # ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    successful_orders = []
    failed_orders = []
    cart_items = []
    total_price = 0
    
    # ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
    order_lines = command_parts[1].strip().split("\n")
    
    for line in order_lines:
        parts = line.strip().split(" ", 2)
        if len(parts) < 3:
            failed_orders.append((line, "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô <‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®> <‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤> <‡∏à‡∏≥‡∏ô‡∏ß‡∏ô>"))
            continue
        
        country = parts[0]
        if not country.isdigit() or int(country) < 1 or int(country) > 5:
            failed_orders.append((line, f"‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {country} (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 1-5)"))
            continue
        
        # ‡πÅ‡∏¢‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
        quantity_parts = parts[2].rsplit(" ", 1)
        if len(quantity_parts) == 2:
            product_name = parts[1] + " " + quantity_parts[0]
            quantity_str = quantity_parts[1]
        else:
            product_name = parts[1]
            quantity_str = parts[2]
        
        if not quantity_str.isdigit():
            failed_orders.append((line, f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {quantity_str} (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç)"))
            continue
        
        quantity = int(quantity_str)
        if quantity <= 0:
            failed_orders.append((line, f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0"))
            continue
        
        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®
        all_products = load_products(country=country)
        product = None
        
        for p in all_products:
            if p["name"].lower() == product_name.lower():
                product = p
                break
        
        if not product:
            failed_orders.append((line, f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: {product_name} ‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® {country}"))
            continue
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ placeholder
        if product["name"] == "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤":
            failed_orders.append((line, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ"))
            continue
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
        item_price = product["price"] * quantity
        total_price += item_price
        
        cart_items.append({
            "product": product,
            "quantity": quantity,
            "subtotal": item_price,
            "country": country
        })
        
        successful_orders.append((
            f"{COUNTRY_EMOJIS.get(country, '')} {product['emoji']} {product['name']} x{quantity} = {item_price:,.2f} ‡∏ö‡∏≤‡∏ó"
        ))
    
    if not cart_items:
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        error_embed = discord.Embed(
            title="‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ",
            description="‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
            color=discord.Color.red()
        )
        
        if failed_orders:
            error_list = "\n".join([f"‚Ä¢ {order}: {reason}" for order, reason in failed_orders])
            error_embed.add_field(
                name="‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
                value=error_list[:1024],  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô field
                inline=False
            )
        
        await ctx.send(embed=error_embed)
        return
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á embed ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
    cart_embed = discord.Embed(
        title="üõí ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
        description="‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å",
        color=discord.Color.blue()
    )
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
    if successful_orders:
        cart_embed.add_field(
            name=f"‚úÖ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ ({len(successful_orders)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)",
            value="\n".join(successful_orders)[:1024],
            inline=False
        )
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    if failed_orders:
        error_list = "\n".join([f"‚Ä¢ {order}: {reason}" for order, reason in failed_orders[:5]])
        if len(failed_orders) > 5:
            error_list += f"\n‚Ä¢ ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å {len(failed_orders) - 5} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£..."
            
        cart_embed.add_field(
            name=f"‚ùå ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ({len(failed_orders)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)",
            value=error_list[:1024],
            inline=False
        )
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°
    cart_embed.add_field(
        name="üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°",
        value=f"{total_price:,.2f} ‡∏ö‡∏≤‡∏ó",
        inline=False
    )
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà footer
    cart_embed.set_footer(text="‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° '‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    class CheckoutView(discord.ui.View):
        def __init__(self):
            super().__init__(timeout=600)  # ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 10 ‡∏ô‡∏≤‡∏ó‡∏µ
        
        @discord.ui.button(label="üí≥ ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô", style=discord.ButtonStyle.green)
        async def checkout_button(self, button_interaction: discord.Interaction, button: discord.ui.Button):
            if button_interaction.user.id != ctx.author.id:
                await button_interaction.response.send_message("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ú‡∏π‡πâ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ", ephemeral=True)
                return
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á embed ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
            payment_embed = discord.Embed(
                title="üí≥ ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô",
                description=f"‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {total_price:,.2f} ‡∏ö‡∏≤‡∏ó ‡πÇ‡∏î‡∏¢‡∏™‡πÅ‡∏Å‡∏ô QR Code ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á",
                color=discord.Color.green()
            )
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
            items_list = []
            for item in cart_items:
                product = item["product"]
                qty = item["quantity"]
                subtotal = item["subtotal"]
                country_name = COUNTRY_NAMES.get(item["country"], item["country"])
                items_list.append(f"{product['emoji']} {product['name']} x{qty} ({country_name}) = {subtotal:,.2f} ‡∏ö‡∏≤‡∏ó")
            
            payment_embed.add_field(
                name=f"üõí ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ({len(cart_items)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)",
                value="\n".join(items_list)[:1024],
                inline=False
            )
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°
            payment_embed.add_field(
                name="üí∞ ‡∏¢‡∏≠‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
                value=f"{total_price:,.2f} ‡∏ö‡∏≤‡∏ó",
                inline=False
            )
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° QR Code
            qr_url = await load_qrcode_url_async_local()
            payment_embed.set_image(url=qr_url)
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
            payment_embed.set_footer(text="‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏£‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° '‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠")
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
            class PaymentView(discord.ui.View):
                def __init__(self):
                    super().__init__(timeout=None)  # ‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤
                
                @discord.ui.button(label="‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô)", style=discord.ButtonStyle.green)
                async def confirm_button(self, confirm_interaction: discord.Interaction, confirm_button: discord.ui.Button):
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                    if not confirm_interaction.user.guild_permissions.administrator:
                        await confirm_interaction.response.send_message("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)", ephemeral=True)
                        return
                    
                    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠
                    purchase_id = log_purchase(ctx.author, cart_items, total_price)
                    
                    # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì
                    thank_you_message = load_thank_you_message()
                    
                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á embed ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì
                    thank_you_embed = discord.Embed(
                        title="‚úÖ ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå",
                        description=thank_you_message,
                        color=discord.Color.green()
                    )
                    
                    thank_you_embed.set_footer(text=f"‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠: {purchase_id}")
                    
                    await confirm_interaction.response.edit_message(embed=thank_you_embed, view=None)
            
            await button_interaction.response.edit_message(embed=payment_embed, view=PaymentView())
        
        @discord.ui.button(label="‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", style=discord.ButtonStyle.red)
        async def cancel_button(self, button_interaction: discord.Interaction, button: discord.ui.Button):
            if button_interaction.user.id != ctx.author.id:
                await button_interaction.response.send_message("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ú‡∏π‡πâ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ", ephemeral=True)
                return
            
            cancel_embed = discord.Embed(
                title="‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏•‡πâ‡∏ß",
                description="‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß",
                color=discord.Color.red()
            )
            
            await button_interaction.response.edit_message(embed=cancel_embed, view=None)
    
    await ctx.send(embed=cart_embed, view=CheckoutView())

# ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
@bot.command(name="saveall", aliases=["‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", "backup"])
async def save_all_command(ctx):
    """Command to save all database information in command format for easy restoration"""
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
    if not ctx.author.guild_permissions.administrator:
        await ctx.send("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏• (Administrator)")
        return
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á embed ‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
    processing_embed = discord.Embed(
        title="‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...",
        description="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà",
        color=discord.Color.blue()
    )
    message = await ctx.send(embed=processing_embed)
    
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    # 1. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® - ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÇ‡∏Å‡∏•‡∏ö‡∏≠‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå
    countries = COUNTRIES
    country_names = COUNTRY_NAMES
    country_emojis = COUNTRY_EMOJIS
    
    # ‡∏´‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÇ‡∏Å‡∏•‡∏ö‡∏≠‡∏•‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å MongoDB
    if not countries:
        try:
            countries, country_names, country_emojis, _ = load_countries()
            processing_embed = discord.Embed(
                title="‚ÑπÔ∏è ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å MongoDB",
                description="‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å MongoDB ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
                color=discord.Color.blue()
            )
            await message.edit(embed=processing_embed)
        except Exception as e:
            # ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà return ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÇ‡∏Å‡∏•‡∏ö‡∏≠‡∏•‡∏ï‡πà‡∏≠‡πÑ‡∏õ
            error_embed = discord.Embed(
                title="‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB ‡πÑ‡∏î‡πâ",
                description=f"‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÇ‡∏Å‡∏•‡∏ö‡∏≠‡∏•‡πÅ‡∏ó‡∏ô\nError: {str(e)[:100]}...",
                color=discord.Color.gold()
            )
            await message.edit(embed=error_embed)
    
    if not countries:
        await ctx.send("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÉ‡∏î‡πÜ ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
        return
    
    # 2. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
    category_names = {}
    category_emojis = {}
    try:
        # ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÇ‡∏Å‡∏•‡∏ö‡∏≠‡∏•
        category_names = CATEGORY_NAMES
        category_emojis = CATEGORY_EMOJIS
    except Exception as e:
        # ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà return
        await ctx.send(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà: {str(e)[:100]}...")
        
    # 3. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    all_products = []
    
    # ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå JSON ‡∏Å‡πà‡∏≠‡∏ô
    try:
        # ‡πÉ‡∏ä‡πâ categories directory ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        categories_dir = SCRIPT_DIR / "categories"
        
        if categories_dir.exists():
            # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®
            for country_dir in sorted(categories_dir.iterdir()):
                if country_dir.is_dir():
                    country_code = country_dir.name
                    # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
                    for category_file in sorted(country_dir.iterdir()):
                        if category_file.is_file() and category_file.suffix == '.json':
                            category_code = category_file.stem
                            try:
                                with open(category_file, "r", encoding="utf-8") as f:
                                    category_products = json.load(f)
                                    # ‡πÄ‡∏û‡∏¥‡πà‡∏° country ‡πÅ‡∏•‡∏∞ category code ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
                                    for product in category_products:
                                        if isinstance(product, dict) and "name" in product and product["name"] != "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤":
                                            product["country"] = country_code
                                            product["category"] = category_code
                                            all_products.append(product)
                            except Exception as e:
                                await ctx.send(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå {category_file}: {str(e)[:100]}...")
        
        if all_products:
            processing_embed = discord.Embed(
                title="‚ÑπÔ∏è ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
                description=f"‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(all_products)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå categories",
                color=discord.Color.blue()
            )
            await message.edit(embed=processing_embed)
        else:
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå categories ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å products.json
            try:
                with open(PRODUCTS_FILE, "r", encoding="utf-8") as f:
                    all_products = json.load(f)
                if all_products:
                    processing_embed = discord.Embed(
                        title="‚ÑπÔ∏è ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
                        description=f"‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(all_products)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå JSON",
                        color=discord.Color.blue()
                    )
                    await message.edit(embed=processing_embed)
            except Exception:
                pass
    except Exception as e:
        await ctx.send(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå categories: {str(e)[:100]}...")
    
    # ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå JSON ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å MongoDB
    if not all_products:
        try:
            all_products = load_products()
            if all_products:
                processing_embed = discord.Embed(
                    title="‚ÑπÔ∏è ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
                    description=f"‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(all_products)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å MongoDB",
                    color=discord.Color.blue()
                )
                await message.edit(embed=processing_embed)
        except Exception as e:
            # ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà return
            error_embed = discord.Embed(
                title="‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å MongoDB ‡πÑ‡∏î‡πâ",
                description=f"‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÇ‡∏Å‡∏•‡∏ö‡∏≠‡∏•‡πÅ‡∏ó‡∏ô\nError: {str(e)[:100]}...",
                color=discord.Color.gold()
            )
            await message.edit(embed=error_embed)
    
    # 4. QR Code URL
    qr_code_url = ""
    # ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÇ‡∏Å‡∏•‡∏ö‡∏≠‡∏•
    try:
        with open(QRCODE_CONFIG_FILE, "r", encoding="utf-8") as f:
            qr_code_url = json.load(f).get("url", "")
    except Exception:
        pass
    
    # ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≤‡∏Å db_operations
    if not qr_code_url:
        try:
            temp_url = load_qrcode_url()
            if temp_url:
                qr_code_url = temp_url
        except Exception as e:
            # ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà return
            await ctx.send(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î QR Code URL: {str(e)[:100]}...")
    
    # 5. ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì
    thank_you_message = "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£"
    # ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
    try:
        thank_you_file = SCRIPT_DIR / "thank_you_config.json"
        with open(thank_you_file, "r", encoding="utf-8") as f:
            thank_you_message = json.load(f).get("message", "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£")
    except Exception:
        pass
    
    # ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≤‡∏Å db_operations
    if thank_you_message == "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£":
        try:
            temp_msg = load_thank_you_message()
            if temp_msg:
                thank_you_message = temp_msg
        except Exception as e:
            # ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà return
            await ctx.send(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì: {str(e)[:100]}...")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    commands_text = f"# ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î\n# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠: {current_time}\n\n"
    
    # 1. ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®
    if countries:
        commands_text += "# ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®\n"
        commands_text += "!‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®\n"
        for code in countries:
            emoji = country_emojis.get(code, "")
            name = country_names.get(code, "")
            if emoji and name:
                commands_text += f"{code} {emoji} {name}\n"
        commands_text += "\n"
    
    # 2. ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
    if category_names:
        commands_text += "# ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà\n"
        commands_text += "!‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏°‡∏ß‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤\n"
        for code in category_names:
            emoji = category_emojis.get(code, "")
            name = category_names.get(code, "")
            if emoji and name:
                commands_text += f"{code} {emoji} {name}\n"
        commands_text += "\n"
    
    # 3. ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    if all_products:
        commands_text += "# ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤\n"
        
        # ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà placeholder
        valid_products = []
        for product in all_products:
            if product["name"] != "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤":
                emoji = product.get("emoji", "")
                name = product.get("name", "")
                price = product.get("price", 0)
                category = product.get("category", "")
                country = product.get("country", "")
                valid_products.append((emoji, name, price, category, country))
        
        # ‡πÅ‡∏ö‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∏‡∏î ‡∏ä‡∏∏‡∏î‡∏•‡∏∞ 50 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
        product_chunks = [valid_products[i:i+50] for i in range(0, len(valid_products), 50)]
        
        for i, chunk in enumerate(product_chunks):
            commands_text += f"!‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤\n"
            for emoji, name, price, category, country in chunk:
                commands_text += f"{emoji} {name} {price:.1f} {category} {country}\n"
            commands_text += "\n"
    
    # 4. ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô QR Code URL
    if qr_code_url:
        commands_text += "# ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô QR Code\n"
        commands_text += f"!qrcode {qr_code_url}\n\n"
    
    # 5. ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì
    if thank_you_message:
        commands_text += "# ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì\n"
        commands_text += f"!‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì {thank_you_message}\n\n"
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠
    commands_text += "# ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:\n"
    commands_text += "# 1. ‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î\n"
    commands_text += "# 2. ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ñ‡∏π‡∏Å‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∏‡∏î ‡∏ä‡∏∏‡∏î‡∏•‡∏∞ 50 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤\n"
    commands_text += "# 3. ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏ó‡∏µ‡πà Discord ‡∏à‡∏∞‡∏™‡πà‡∏á‡πÑ‡∏î‡πâ ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°\n"
    
    # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡πÅ‡∏ö‡πà‡∏á‡∏™‡πà‡∏á‡∏´‡∏≤‡∏Å‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
    max_length = 1900  # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô Discord ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 2000 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
    
    # ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô ‡πÜ ‡∏´‡∏≤‡∏Å‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
    parts = [commands_text[i:i+max_length] for i in range(0, len(commands_text), max_length)]
    
    # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏Å‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°
    embed = discord.Embed(
        title="üíæ ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        description=f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®: {len(countries)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà: {len(category_names)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: {len(all_products)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£",
        color=discord.Color.green()
    )
    embed.set_footer(text=f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô {len(parts)} ‡∏™‡πà‡∏ß‡∏ô")
    
    await message.edit(embed=embed)
    
    # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡πà‡∏ß‡∏ô
    for i, part in enumerate(parts):
        await ctx.send(f"```\n{part}\n```")
    
    # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏£‡∏∏‡∏õ
    summary_embed = discord.Embed(
        title="‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        description=f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß\n‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï",
        color=discord.Color.green()
    )
    
    await ctx.send(embed=summary_embed)

@bot.event
async def on_command_error(ctx, error):
    """Error handler for bot commands"""
    if isinstance(error, commands.CommandNotFound):
        return
    elif isinstance(error, commands.MissingPermissions):
        await ctx.send("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏• (Administrator)")
    elif isinstance(error, commands.MissingRole):
        await ctx.send("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ")
    elif isinstance(error, commands.MissingRequiredArgument):
        await ctx.send(f"‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {str(error)}")
    elif isinstance(error, commands.BadArgument):
        await ctx.send("‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏™‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
    else:
        await ctx.send(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(error)}")
        print(f"Command error: {error}")

# Get token from environment variables with fallback to a default value (for testing)
TOKEN = os.getenv("DISCORD_BOT_TOKEN", "")

if not TOKEN:
    print("‚ùå ERROR: Discord bot token not provided. Please set the DISCORD_BOT_TOKEN environment variable.")
    exit(1)

@bot.command(name="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏°‡∏ß‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", aliases=["‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏°‡∏ß‡∏î", "editcategory"])
async def edit_category_command(ctx, *, ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: str = None):
    """‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô)
    
    Args:
        ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡πÇ‡∏î‡∏¢‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
               ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö "‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡πÉ‡∏´‡∏°‡πà ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡πÉ‡∏´‡∏°‡πà" ‡∏´‡∏£‡∏∑‡∏≠
               "‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà" ‡πÑ‡∏î‡πâ
               
    ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
        !‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏°‡∏ß‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
        money üí∞ ‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î
        weapon üó°Ô∏è ‡∏≠‡∏≤‡∏ß‡∏∏‡∏ò‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ
        item üì¶ ‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
    """
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
    if not ctx.author.guild_permissions.administrator:
        await ctx.send("‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
        return
    
    if ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• is None:
        # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ
        category_list = "\n".join([f"- {code}: {CATEGORY_EMOJIS.get(code, '‚ùì')} {CATEGORY_NAMES[code]}" for code in CATEGORIES])
        
        embed = discord.Embed(
            title="üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
            description="‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á `!‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏°‡∏ß‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤` ‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö **‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡πÉ‡∏´‡∏°‡πà ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏´‡∏°‡πà** ‡πÅ‡∏¢‡∏Å‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà",
            color=discord.Color.blue()
        )
        
        embed.add_field(
            name="‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô",
            value=category_list,
            inline=False
        )
        
        embed.add_field(
            name="‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á",
            value="```\n!‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏°‡∏ß‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤\nmoney üí∞ ‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î\nweapon üó°Ô∏è ‡∏≠‡∏≤‡∏ß‡∏∏‡∏ò‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ\nitem üì¶ ‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ```",
            inline=False
        )
        
        await ctx.send(embed=embed)
        return
    
    # ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
    lines = ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•.strip().split('\n')
    edited_categories = []
    failed_categories = []
    
    # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
    for line in lines:
        parts = line.strip().split(maxsplit=2)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if len(parts) < 2:
            failed_categories.append((line, "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠"))
            continue
        
        # ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà, ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥, ‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠
        category_code = parts[0]
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        if len(parts) == 2:
            # ‡∏°‡∏µ‡πÅ‡∏Ñ‡πà‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠/‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥
            second_part = parts[1]
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠
            if len(second_part) <= 2 or any(ord(c) > 127 for c in second_part[:2]):
                # ‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥
                emoji = second_part
                name = None
            else:
                # ‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
                emoji = None
                name = second_part
        else:
            # ‡∏°‡∏µ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà, ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥, ‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠
            emoji = parts[1]
            name = parts[2]
        
        # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
        result = edit_category(category_code, emoji, name)
        
        if result:
            edited_categories.append(category_code)
        else:
            failed_categories.append((category_code, f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà {category_code}"))
    
    # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    embed = discord.Embed(
        title="üîÑ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
        color=discord.Color.green() if edited_categories else discord.Color.red()
    )
    
    if edited_categories:
        # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        success_list = "\n".join([f"- {code}: {CATEGORY_EMOJIS.get(code, '‚ùì')} {CATEGORY_NAMES[code]}" for code in edited_categories])
        embed.add_field(
            name=f"‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ({len(edited_categories)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)",
            value=success_list,
            inline=False
        )
    
    if failed_categories:
        # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        fail_list = "\n".join([f"- {code}: {reason}" for code, reason in failed_categories])
        embed.add_field(
            name=f"‚ùå ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ({len(failed_categories)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)",
            value=fail_list,
            inline=False
        )
    
    await ctx.send(embed=embed)

@bot.tree.command(name="‡∏£‡πâ‡∏≤‡∏ô", description="‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")
async def shop_slash(interaction: discord.Interaction, ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®: str = None, ‡∏´‡∏°‡∏ß‡∏î: str = None):
    """Slash command to open the shop
    
    Args:
        ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®: Country name (thailand, japan, usa)
        ‡∏´‡∏°‡∏ß‡∏î: Category name (money, weapon, item, car, fashion, rentcar)
    """
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    country = "thailand"  # ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    category = "item"     # ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏≤‡∏£‡πå‡∏Å‡∏¥‡∏ß‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®
    if ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®:
        # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
        if ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®.lower() in COUNTRIES:
            country = ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®.lower()
        # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
        elif ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® in ["‡πÑ‡∏ó‡∏¢", "‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô", "‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤"]:
            # ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
            thai_to_eng = {"‡πÑ‡∏ó‡∏¢": "thailand", "‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô": "japan", "‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤": "usa"}
            country = thai_to_eng[‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®]
        else:
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏´‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            countries_str = ", ".join([f"`{COUNTRY_NAMES[c]}`" for c in COUNTRIES])
            await interaction.response.send_message(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏\n‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏µ‡πà‡∏°‡∏µ: {countries_str}")
            return
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏≤‡∏£‡πå‡∏Å‡∏¥‡∏ß‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
    if ‡∏´‡∏°‡∏ß‡∏î:
        # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
        if ‡∏´‡∏°‡∏ß‡∏î.lower() in CATEGORIES:
            category = ‡∏´‡∏°‡∏ß‡∏î.lower()
        # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
        elif ‡∏´‡∏°‡∏ß‡∏î in ["‡πÄ‡∏á‡∏¥‡∏ô", "‡∏≠‡∏≤‡∏ß‡∏∏‡∏ò", "‡πÑ‡∏≠‡πÄ‡∏ó‡∏°", "‡∏£‡∏ñ", "‡πÅ‡∏ü‡∏ä‡∏±‡πà‡∏ô", "‡πÄ‡∏ä‡πà‡∏≤‡∏£‡∏ñ"]:
            # ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
            thai_to_eng = {"‡πÄ‡∏á‡∏¥‡∏ô": "money", "‡∏≠‡∏≤‡∏ß‡∏∏‡∏ò": "weapon", "‡πÑ‡∏≠‡πÄ‡∏ó‡∏°": "item", 
                          "‡∏£‡∏ñ": "car", "‡πÅ‡∏ü‡∏ä‡∏±‡πà‡∏ô": "fashion", "‡πÄ‡∏ä‡πà‡∏≤‡∏£‡∏ñ": "rentcar"}
            category = thai_to_eng[‡∏´‡∏°‡∏ß‡∏î]
        else:
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏´‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            categories_str = ", ".join([f"`{CATEGORY_NAMES[c]}`" for c in CATEGORIES])
            await interaction.response.send_message(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏\n‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ: {categories_str}")
            return
    
    # ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
    products = load_products(country, category)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if not products:
        await interaction.response.send_message(f"‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® `{COUNTRY_NAMES[country]}` ‡∏´‡∏°‡∏ß‡∏î `{CATEGORY_NAMES[category]}`")
        return
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á view ‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
    view = CategoryShopView(CATEGORIES, current_category=category, country=country)
    
    # ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    if not view.all_products:
        await interaction.response.send_message(f"‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡πâ‡∏≤‡∏ô")
        return
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    title = f"üõçÔ∏è ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® `{COUNTRY_NAMES[country]}` ‡∏´‡∏°‡∏ß‡∏î `{CATEGORY_NAMES[category]}`"
    await interaction.response.send_message(title, view=view)

@bot.tree.command(name="‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", description="‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
@discord.app_commands.describe(‡∏´‡∏°‡∏ß‡∏î="‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π")
@discord.app_commands.choices(‡∏´‡∏°‡∏ß‡∏î=[
    discord.app_commands.Choice(name="‡πÄ‡∏á‡∏¥‡∏ô", value="money"),
    discord.app_commands.Choice(name="‡∏≠‡∏≤‡∏ß‡∏∏‡∏ò", value="weapon"),
    discord.app_commands.Choice(name="‡πÑ‡∏≠‡πÄ‡∏ó‡∏°", value="item"),
    discord.app_commands.Choice(name="‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ", value="story"),
    discord.app_commands.Choice(name="‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå", value="car"),
    discord.app_commands.Choice(name="‡πÅ‡∏ü‡∏ä‡∏±‡πà‡∏ô", value="fashion"),
    discord.app_commands.Choice(name="‡πÄ‡∏ä‡πà‡∏≤‡∏£‡∏ñ", value="rentcar")
])
async def list_products_slash(interaction: discord.Interaction, ‡∏´‡∏°‡∏ß‡∏î: str = None):
    """Slash command to list all products"""
    # If category is specified, load products from that category
    if ‡∏´‡∏°‡∏ß‡∏î:
        products = load_products(‡∏´‡∏°‡∏ß‡∏î)
        title = f"üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏°‡∏ß‡∏î `{‡∏´‡∏°‡∏ß‡∏î}`"
    else:
        # Otherwise, collect products from all categories
        all_products = []
        categories = ["money", "weapon", "item", "car", "fashion", "rentcar"]
        
        for category in categories:
            products = load_products(category)
            if products:
                # Add category name to each product for display
                for product in products:
                    product['category'] = category
                all_products.extend(products)
        
        products = all_products
        title = "üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
    
    if not products:
        if ‡∏´‡∏°‡∏ß‡∏î:
            await interaction.response.send_message(f"‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î `{‡∏´‡∏°‡∏ß‡∏î}`")
        else:
            await interaction.response.send_message("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡πâ‡∏≤‡∏ô")
        return
        
    embed = discord.Embed(title=title, color=0x3498db)
    
    # Group products by category if showing all products
    if not ‡∏´‡∏°‡∏ß‡∏î:
        # Sort products by category for better organization
        products = sorted(products, key=lambda x: x.get('category', ''))
        
        current_category = None
        for product in products:
            category = product.get('category')
            
            # Add category header when category changes
            if category != current_category:
                embed.add_field(
                    name=f"üî∏ ‡∏´‡∏°‡∏ß‡∏î {category}", 
                    value="‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ", 
                    inline=False
                )
                current_category = category
            
            embed.add_field(
                name=f"{product['emoji']} {product['name']}",
                value=f"‡∏£‡∏≤‡∏Ñ‡∏≤: {product['price']:.2f}‡∏ø",
                inline=True
            )
    else:
        # Simple list for a specific category
        for product in products:
            embed.add_field(
                name=f"{product['emoji']} {product['name']}",
                value=f"‡∏£‡∏≤‡∏Ñ‡∏≤: {product['price']}‡∏ø",
                inline=True
            )
    
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", description="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πâ‡∏≤‡∏ô (Admin only)")
@discord.app_commands.describe(
    ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥="‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ ‡πÄ‡∏ä‡πà‡∏ô :emoji_name:)",
    ‡∏ä‡∏∑‡πà‡∏≠="‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
    ‡∏£‡∏≤‡∏Ñ‡∏≤="‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°‡πÑ‡∏î‡πâ ‡πÄ‡∏ä‡πà‡∏ô 99.50)",
    ‡∏´‡∏°‡∏ß‡∏î="‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ)",
    ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®="‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ)"
)
@discord.app_commands.choices(‡∏´‡∏°‡∏ß‡∏î=[
    discord.app_commands.Choice(name="‡πÄ‡∏á‡∏¥‡∏ô", value="money"),
    discord.app_commands.Choice(name="‡∏≠‡∏≤‡∏ß‡∏∏‡∏ò", value="weapon"),
    discord.app_commands.Choice(name="‡πÑ‡∏≠‡πÄ‡∏ó‡∏°", value="item"),
    discord.app_commands.Choice(name="‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ", value="story"),
    discord.app_commands.Choice(name="‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå", value="car"),
    discord.app_commands.Choice(name="‡πÅ‡∏ü‡∏ä‡∏±‡πà‡∏ô", value="fashion"),
    discord.app_commands.Choice(name="‡πÄ‡∏ä‡πà‡∏≤‡∏£‡∏ñ", value="rentcar")
])
@discord.app_commands.choices(‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®=[
    discord.app_commands.Choice(name="‡πÑ‡∏ó‡∏¢", value="thailand"),
    discord.app_commands.Choice(name="‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô", value="japan"),
    discord.app_commands.Choice(name="‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤", value="usa")
])
async def add_product_slash(interaction: discord.Interaction, ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥: str, ‡∏ä‡∏∑‡πà‡∏≠: str, ‡∏£‡∏≤‡∏Ñ‡∏≤: float, ‡∏´‡∏°‡∏ß‡∏î: str = "item", ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®: str = "thailand"):
    """Slash command to add a new product (Admin only)
    
    Args:
        ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥: ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        ‡∏ä‡∏∑‡πà‡∏≠: ‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        ‡∏£‡∏≤‡∏Ñ‡∏≤: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        ‡∏´‡∏°‡∏ß‡∏î: ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (money, weapon, item, car, fashion, rentcar)
        ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®: ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏µ‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà (thailand, japan, usa)
    """
    # Check if user has Administrator permissions
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏• (Administrator)", ephemeral=True)
        return
        
    try:
        # Parse custom emoji if provided in <:name:id> format
        emoji_to_use = ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥
        if ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥.startswith("<") and ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥.endswith(">"):
            # Already in proper format, use as is
            pass
        elif ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥.startswith(":") and ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥.endswith(":"):
            # Convert :emoji_name: to actual emoji
            emoji_name = ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥.strip(":")
            # Try to find the emoji in the server
            found_emoji = discord.utils.get(interaction.guild.emojis, name=emoji_name)
            if found_emoji:
                emoji_to_use = str(found_emoji)
            else:
                await interaction.response.send_message(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥ '{‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥}' ‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ", ephemeral=True)
                return
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
        if ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® in ["‡πÑ‡∏ó‡∏¢", "‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô", "‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤"]:
            thai_to_eng = {"‡πÑ‡∏ó‡∏¢": "thailand", "‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô": "japan", "‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤": "usa"}
            ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® = thai_to_eng[‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®]
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        if ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®.lower() not in COUNTRIES:
            countries_str = ", ".join([f"`{COUNTRY_NAMES[c]}`" for c in COUNTRIES])
            await interaction.response.send_message(f"‚ùå ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö: {countries_str}", ephemeral=True)
            return
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
        if ‡∏´‡∏°‡∏ß‡∏î in ["‡πÄ‡∏á‡∏¥‡∏ô", "‡∏≠‡∏≤‡∏ß‡∏∏‡∏ò", "‡πÑ‡∏≠‡πÄ‡∏ó‡∏°", "‡∏£‡∏ñ", "‡πÅ‡∏ü‡∏ä‡∏±‡πà‡∏ô", "‡πÄ‡∏ä‡πà‡∏≤‡∏£‡∏ñ"]:
            thai_to_eng = {"‡πÄ‡∏á‡∏¥‡∏ô": "money", "‡∏≠‡∏≤‡∏ß‡∏∏‡∏ò": "weapon", "‡πÑ‡∏≠‡πÄ‡∏ó‡∏°": "item", 
                          "‡∏£‡∏ñ": "car", "‡πÅ‡∏ü‡∏ä‡∏±‡πà‡∏ô": "fashion", "‡πÄ‡∏ä‡πà‡∏≤‡∏£‡∏ñ": "rentcar"}
            ‡∏´‡∏°‡∏ß‡∏î = thai_to_eng[‡∏´‡∏°‡∏ß‡∏î]
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å
        ‡∏´‡∏°‡∏ß‡∏î = ‡∏´‡∏°‡∏ß‡∏î.lower()
        ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® = ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®.lower()
        
        # ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
        products = load_products(‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®, ‡∏´‡∏°‡∏ß‡∏î)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        for product in products:
            if product["name"] == ‡∏ä‡∏∑‡πà‡∏≠:
                await interaction.response.send_message(f"‚ùå ‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ `{‡∏ä‡∏∑‡πà‡∏≠}` ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® `{COUNTRY_NAMES[‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®]}` ‡∏´‡∏°‡∏ß‡∏î `{CATEGORY_NAMES[‡∏´‡∏°‡∏ß‡∏î]}`", ephemeral=True)
                return
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
        new_product = {
            "name": ‡∏ä‡∏∑‡πà‡∏≠, 
            "price": ‡∏£‡∏≤‡∏Ñ‡∏≤, 
            "emoji": emoji_to_use, 
            "category": ‡∏´‡∏°‡∏ß‡∏î,
            "country": ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®
        }
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
        products.append(new_product)
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
        save_products(products, ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®, ‡∏´‡∏°‡∏ß‡∏î)
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
        save_product_to_category(new_product)
        
        # ‡πÅ‡∏à‡πâ‡∏á‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        await interaction.response.send_message(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: {emoji_to_use} {‡∏ä‡∏∑‡πà‡∏≠} - {‡∏£‡∏≤‡∏Ñ‡∏≤:.2f}‡∏ø (‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®: {COUNTRY_NAMES[‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®]}, ‡∏´‡∏°‡∏ß‡∏î: {CATEGORY_NAMES[‡∏´‡∏°‡∏ß‡∏î]})")
    except Exception as e:
        await interaction.response.send_message(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}", ephemeral=True)

@bot.tree.command(name="‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", description="‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡πâ‡∏≤‡∏ô (Admin only)")
@discord.app_commands.describe(‡∏ä‡∏∑‡πà‡∏≠="‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö")
async def remove_product_slash(interaction: discord.Interaction, ‡∏ä‡∏∑‡πà‡∏≠: str):
    """Slash command to remove a product (Admin only)"""
    # Check if user has Administrator permissions
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏• (Administrator)", ephemeral=True)
        return
        
    try:
        products = load_products()
        original_count = len(products)
        
        # Find product to show category before deletion
        product_to_delete = next((p for p in products if p["name"] == ‡∏ä‡∏∑‡πà‡∏≠), None)
        if not product_to_delete:
            await interaction.response.send_message(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ '{‡∏ä‡∏∑‡πà‡∏≠}'", ephemeral=True)
            return
        
        # Remove the product
        products = [p for p in products if p["name"] != ‡∏ä‡∏∑‡πà‡∏≠]
        save_products(products)
        
        category = product_to_delete.get("category", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏ß‡∏î")
        await interaction.response.send_message(f"üóëÔ∏è ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ '{‡∏ä‡∏∑‡πà‡∏≠}' ‡∏à‡∏≤‡∏Å‡∏´‡∏°‡∏ß‡∏î '{category}' ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
    except Exception as e:
        await interaction.response.send_message(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}", ephemeral=True)

@bot.tree.command(name="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", description="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (Admin only)")
@discord.app_commands.describe(
    ‡∏ä‡∏∑‡πà‡∏≠="‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç",
    ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà="‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô)",
    ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏´‡∏°‡πà="‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°‡πÑ‡∏î‡πâ ‡πÄ‡∏ä‡πà‡∏ô 99.50, ‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô)",
    ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡πÉ‡∏´‡∏°‡πà="‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô)",
    ‡∏´‡∏°‡∏ß‡∏î‡πÉ‡∏´‡∏°‡πà="‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô)"
)
@discord.app_commands.choices(‡∏´‡∏°‡∏ß‡∏î‡πÉ‡∏´‡∏°‡πà=[
    discord.app_commands.Choice(name="‡πÄ‡∏á‡∏¥‡∏ô", value="money"),
    discord.app_commands.Choice(name="‡∏≠‡∏≤‡∏ß‡∏∏‡∏ò", value="weapon"),
    discord.app_commands.Choice(name="‡πÑ‡∏≠‡πÄ‡∏ó‡∏°", value="item"),
    discord.app_commands.Choice(name="‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ", value="story"),
    discord.app_commands.Choice(name="‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå", value="car"),
    discord.app_commands.Choice(name="‡πÅ‡∏ü‡∏ä‡∏±‡πà‡∏ô", value="fashion"),
    discord.app_commands.Choice(name="‡πÄ‡∏ä‡πà‡∏≤‡∏£‡∏ñ", value="rentcar")
])
async def edit_product_slash(interaction: discord.Interaction, ‡∏ä‡∏∑‡πà‡∏≠: str, ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®: str = "thailand", ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡πÉ‡∏´‡∏°‡πà: str = None, ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà: str = None, ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏´‡∏°‡πà: float = None, ‡∏´‡∏°‡∏ß‡∏î‡πÉ‡∏´‡∏°‡πà: str = None, ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÉ‡∏´‡∏°‡πà: str = None):
    """Slash command to edit a product (Admin only)"""
    # Check if user has Administrator permissions
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏• (Administrator)", ephemeral=True)
        return
        
    # Check if the new category is valid if provided
    if ‡∏´‡∏°‡∏ß‡∏î‡πÉ‡∏´‡∏°‡πà and ‡∏´‡∏°‡∏ß‡∏î‡πÉ‡∏´‡∏°‡πà not in CATEGORIES:
        categories_str = ", ".join([f"`{CATEGORY_NAMES[cat]}`" for cat in CATEGORIES])
        await interaction.response.send_message(f"‚ùå ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ: {categories_str}", ephemeral=True)
        return
        
    try:
        products = load_products()
        
        # Find the product
        found = False
        for product in products:
            if product["name"] == ‡∏ä‡∏∑‡πà‡∏≠:
                found = True
                
                # Update product details if provided
                if ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà:
                    product["name"] = ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà
                if ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏´‡∏°‡πà is not None:
                    product["price"] = ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏´‡∏°‡πà
                if ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡πÉ‡∏´‡∏°‡πà:
                    product["emoji"] = ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡πÉ‡∏´‡∏°‡πà
                if ‡∏´‡∏°‡∏ß‡∏î‡πÉ‡∏´‡∏°‡πà:
                    product["category"] = ‡∏´‡∏°‡∏ß‡∏î‡πÉ‡∏´‡∏°‡πà
                
                break
        
        if not found:
            await interaction.response.send_message(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ '{‡∏ä‡∏∑‡πà‡∏≠}'", ephemeral=True)
            return
            
        save_products(products)
        
        product_name = ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà if ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà else ‡∏ä‡∏∑‡πà‡∏≠
        
        # Show updated product details
        product = next((p for p in products if p["name"] == product_name), None)
        if product:
            embed = discord.Embed(title="‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï", color=0x00ff00)
            embed.add_field(name="‡∏ä‡∏∑‡πà‡∏≠", value=product["name"], inline=True)
            embed.add_field(name="‡∏£‡∏≤‡∏Ñ‡∏≤", value=f"{product['price']:.2f}‡∏ø", inline=True)
            embed.add_field(name="‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥", value=product["emoji"], inline=True)
            
            # Add category field if present
            if "category" in product:
                category_name = product["category"]
                # ‡πÉ‡∏ä‡πâ CATEGORY_NAMES ‡∏ó‡∏µ‡πà‡∏ô‡∏¥‡∏¢‡∏≤‡∏°‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ó‡∏ô dictionary ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡∏°‡πà
                category_display = CATEGORY_NAMES.get(category_name, category_name)
                embed.add_field(name="‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà", value=category_display, inline=True)
                
            await interaction.response.send_message(embed=embed)
            
    except Exception as e:
        await interaction.response.send_message(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}", ephemeral=True)

@bot.tree.command(name="‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥", description="‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (Admin only)")
@discord.app_commands.describe(‡∏à‡∏≥‡∏ô‡∏ß‡∏ô="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π (‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ñ‡∏∑‡∏≠ 5)")
async def history_slash(interaction: discord.Interaction, ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: int = 5):
    """Slash command to view purchase history (Admin only)"""
    # Check if user has Administrator permissions
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏• (Administrator)", ephemeral=True)
        return
        
    try:
        if not HISTORY_FILE.exists() or HISTORY_FILE.stat().st_size == 0:
            await interaction.response.send_message("‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠", ephemeral=True)
            return
            
        with open(HISTORY_FILE, "r", encoding="utf-8") as f:
            lines = f.readlines()
            
        if not lines:
            await interaction.response.send_message("‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠", ephemeral=True)
            return
            
        # Get the last N entries
        entries = lines[-‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:] if ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô > 0 else lines
            
        embed = discord.Embed(title="üìú ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠", color=0x00ff00)
        for line in entries:
            try:
                d = json.loads(line)
                dt = datetime.fromisoformat(d['timestamp'])
                formatted_time = dt.strftime("%d/%m/%Y %H:%M")
                summary = ", ".join([f"{x['name']} x{x['qty']}" for x in d['items']])
                embed.add_field(
                    name=f"üë§ {d['user']} ({formatted_time})",
                    value=f"{summary} = {d['total']}‡∏ø",
                    inline=False
                )
            except (json.JSONDecodeError, KeyError) as e:
                continue
                
        await interaction.response.send_message(embed=embed)
    except Exception as e:
        await interaction.response.send_message(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}", ephemeral=True)

@bot.tree.command(name="‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠", description="‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
async def help_slash(interaction: discord.Interaction):
    """Slash command to display help information"""
    embed = discord.Embed(title="üìö ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤", color=0x4f0099)
    
    # General commands
    embed.add_field(
        name="üõí ‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤",
        value="‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á `!‡∏£‡πâ‡∏≤‡∏ô` ‡∏´‡∏£‡∏∑‡∏≠ `/‡∏£‡πâ‡∏≤‡∏ô` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
        inline=False
    )
    
    embed.add_field(
        name="üìã ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
        value="‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á `!‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î` ‡∏´‡∏£‡∏∑‡∏≠ `/‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
        inline=False
    )
    
    # Admin commands
    embed.add_field(
        name="üëë ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô",
        value="‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô",
        inline=False
    )
    
    embed.add_field(
        name="üì• ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
        value="‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á `!‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤` ‡∏´‡∏£‡∏∑‡∏≠ `/‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö",
        inline=False
    )
    
    embed.add_field(
        name="üóëÔ∏è ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
        value="‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á `!‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤` ‡∏´‡∏£‡∏∑‡∏≠ `/‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö",
        inline=False
    )
    embed.add_field(
        name="‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
        value="‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á `!‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤` ‡∏´‡∏£‡∏∑‡∏≠ `/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß",
        inline=False
    )
    embed.add_field(
        name="üìã ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠",
        value="‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á `!‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥` ‡∏´‡∏£‡∏∑‡∏≠ `/‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î",
        inline=False
    )
    
    embed.add_field(
        name="üåè ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®",
        value="‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á `!‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®` ‡∏´‡∏£‡∏∑‡∏≠ `/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®",
        inline=False
    )
    
    embed.add_field(
        name="üì≤ QR Code ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì",
        value="‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á `!qrcode` ‡πÅ‡∏•‡∏∞ `!‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì` ‡∏´‡∏£‡∏∑‡∏≠ `/qrcode` ‡πÅ‡∏•‡∏∞ `/‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô",
        inline=False
    )
    
    embed.add_field(
        name="‚ö†Ô∏è ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
        value="‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á `!‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î` ‡∏´‡∏£‡∏∑‡∏≠ `/‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö",
        inline=False
    )
    
    embed.add_field(
        name="üìñ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô",
        value="‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á `!‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
        inline=False
    )
    
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", description="‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÅ‡∏•‡∏∞‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® (Admin only)")
async def delete_all_products_slash(interaction: discord.Interaction):
    """Slash command to delete all products from all categories in all countries completely (Admin only)"""
    # Check if user has Administrator permissions
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏• (Administrator)", ephemeral=True)
        return
        
    try:
        # Create confirmation message
        confirm_embed = discord.Embed(
            title="‚ö†Ô∏è ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
            description="‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÅ‡∏•‡∏∞‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÇ‡∏î‡∏¢‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå\n**‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏î‡πâ**",
            color=discord.Color.red()
        )
        
        # Create confirmation buttons
        class ConfirmView(discord.ui.View):
            def __init__(self):
                super().__init__(timeout=60)  # Timeout after 60 seconds
                
            @discord.ui.button(label="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö", style=discord.ButtonStyle.danger)
            async def confirm_button(self, button_interaction: discord.Interaction, button: discord.ui.Button):
                if button_interaction.user.id != interaction.user.id:
                    await button_interaction.response.send_message("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ", ephemeral=True)
                    return
                    
                success = delete_all_products()
                
                if success:
                    await button_interaction.response.edit_message(
                        content="‚úÖ ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÅ‡∏•‡∏∞‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
                        embed=None,
                        view=None
                    )
                else:
                    await button_interaction.response.edit_message(
                        content="‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
                        embed=None,
                        view=None
                    )
                
            @discord.ui.button(label="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", style=discord.ButtonStyle.secondary)
            async def cancel_button(self, button_interaction: discord.Interaction, button: discord.ui.Button):
                if button_interaction.user.id != interaction.user.id:
                    await button_interaction.response.send_message("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ", ephemeral=True)
                    return
                    
                await button_interaction.response.edit_message(
                    content="‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
                    embed=None,
                    view=None
                )
                
        # Send the confirmation message with buttons
        await interaction.response.send_message(embed=confirm_embed, view=ConfirmView())
            
    except Exception as e:
        await interaction.response.send_message(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}", ephemeral=True)

@bot.tree.command(name="‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏ß‡∏î", description="‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (Admin only)")
@discord.app_commands.describe(‡∏´‡∏°‡∏ß‡∏î="‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
@discord.app_commands.choices(‡∏´‡∏°‡∏ß‡∏î=[
    discord.app_commands.Choice(name="‡πÄ‡∏á‡∏¥‡∏ô", value="money"),
    discord.app_commands.Choice(name="‡∏≠‡∏≤‡∏ß‡∏∏‡∏ò", value="weapon"),
    discord.app_commands.Choice(name="‡πÑ‡∏≠‡πÄ‡∏ó‡∏°", value="item"),
    discord.app_commands.Choice(name="‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ", value="story"),
    discord.app_commands.Choice(name="‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå", value="car"),
    discord.app_commands.Choice(name="‡πÅ‡∏ü‡∏ä‡∏±‡πà‡∏ô", value="fashion"),
    discord.app_commands.Choice(name="‡πÄ‡∏ä‡πà‡∏≤‡∏£‡∏ñ", value="rentcar")
])
async def clear_category_slash(interaction: discord.Interaction, ‡∏´‡∏°‡∏ß‡∏î: str):
    """Slash command to remove all products from a category (Admin only)"""
    # Check if user has Administrator permissions
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏• (Administrator)", ephemeral=True)
        return
        
    try:
        # Add confirmation prompt
        confirm_embed = discord.Embed(
            title="‚ö†Ô∏è ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î",
            description=f"‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î **{‡∏´‡∏°‡∏ß‡∏î}**\n‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏î‡πâ",
            color=discord.Color.red()
        )
        
        # Create confirmation buttons
        class ConfirmView(discord.ui.View):
            def __init__(self):
                super().__init__(timeout=60)  # Timeout after 60 seconds
                
            @discord.ui.button(label="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö", style=discord.ButtonStyle.danger)
            async def confirm_button(self, button_interaction: discord.Interaction, button: discord.ui.Button):
                if button_interaction.user.id != interaction.user.id:
                    await button_interaction.response.send_message("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ", ephemeral=True)
                    return
                    
                success = clear_category_products(‡∏´‡∏°‡∏ß‡∏î)
                
                if success:
                    await button_interaction.response.edit_message(
                        content=f"‚úÖ ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î **{‡∏´‡∏°‡∏ß‡∏î}** ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
                        embed=None,
                        view=None
                    )
                else:
                    await button_interaction.response.edit_message(
                        content=f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î **{‡∏´‡∏°‡∏ß‡∏î}**",
                        embed=None,
                        view=None
                    )
                
            @discord.ui.button(label="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", style=discord.ButtonStyle.secondary)
            async def cancel_button(self, button_interaction: discord.Interaction, button: discord.ui.Button):
                if button_interaction.user.id != interaction.user.id:
                    await button_interaction.response.send_message("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ", ephemeral=True)
                    return
                    
                await button_interaction.response.edit_message(
                    content="‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
                    embed=None,
                    view=None
                )
        
        # Send confirmation message with buttons
        await interaction.response.send_message(embed=confirm_embed, view=ConfirmView())
        
    except Exception as e:
        await interaction.response.send_message(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}", ephemeral=True)

@bot.tree.command(name="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏Å‡πà‡∏≤", description="‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡πÅ‡∏•‡πâ‡∏ß")
async def batch_add_products_slash_old(interaction: discord.Interaction):
    """Slash command placeholder (deprecated)"""
    await interaction.response.send_message("‚ö†Ô∏è ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ `/‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤` ‡πÅ‡∏ó‡∏ô", ephemeral=True)

# ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡πÄ‡∏î‡∏¥‡∏°‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®/addcountry)

@bot.command(name="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®", aliases=["editcountry"])
async def edit_country_command(ctx, *, ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: str = None):
    """Command to edit countries' name and emojis (Admin only)
    
    Args:
        ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡πÇ‡∏î‡∏¢‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
               ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö "‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥ ‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥" ‡∏´‡∏£‡∏∑‡∏≠
               "‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® ‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®" ‡πÑ‡∏î‡πâ
               
    ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
        !‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®
        1 üáπüá≠ ‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡∏ô‡∏î‡πå
        2 üå∏ ‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô
        3 ü¶Ö ‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤
    """
    # Check if user is admin
    if not ctx.author.guild_permissions.administrator:
        await ctx.send("‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
        return
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• is None:
        # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ
        country_list = "\n".join([f"- {code}: {COUNTRY_EMOJIS.get(code, '‚ùì')} {COUNTRY_NAMES[code]}" for code in COUNTRIES])
        
        embed = discord.Embed(
            title="üåè ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
            description="‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á `!‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®` ‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö **‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥ ‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®** ‡πÅ‡∏¢‡∏Å‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®",
            color=discord.Color.blue()
        )
        
        embed.add_field(
            name="‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô",
            value=country_list,
            inline=False
        )
        
        embed.add_field(
            name="‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á",
            value="```\n!‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®\n1 üáπüá≠ ‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡∏ô‡∏î‡πå\n2 üå∏ ‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô\n3 ü¶Ö ‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤```",
            inline=False
        )
        
        await ctx.send(embed=embed)
        return
    
    # ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
    lines = ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•.strip().split('\n')
    edited_countries = []
    failed_countries = []
    
    # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
    for line in lines:
        parts = line.strip().split(maxsplit=2)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if len(parts) < 2:
            failed_countries.append((line, "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠"))
            continue
        
        # ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®, ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥, ‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠
        country_code = parts[0]
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        if len(parts) == 2:
            # ‡∏°‡∏µ‡πÅ‡∏Ñ‡πà‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠/‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥
            second_part = parts[1]
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠
            if len(second_part) <= 2 or any(ord(c) > 127 for c in second_part[:2]):
                # ‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥
                emoji = second_part
                name = None
            else:
                # ‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®
                emoji = None
                name = second_part
        else:
            # ‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®, ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥, ‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠
            emoji = parts[1]
            name = parts[2]
        
        # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏ß‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
        old_name = COUNTRY_NAMES.get(country_code, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏¥‡∏°")
        old_emoji = COUNTRY_EMOJIS.get(country_code, "‚ùì")
        
        # ‡∏•‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®
        success = edit_country(country_code, name, emoji)
        
        if success:
            # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            edited_info = f"**{country_code}**: "
            changes = []
            
            if emoji:
                changes.append(f"‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥: {old_emoji} ‚Üí {emoji}")
            
            if name:
                changes.append(f"‡∏ä‡∏∑‡πà‡∏≠: {old_name} ‚Üí {name}")
                
            edited_info += ", ".join(changes)
            edited_countries.append(edited_info)
        else:
            failed_countries.append((country_code, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ô‡∏µ‡πâ"))
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á embed ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    embed = discord.Embed(title="üåè ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®", color=discord.Color.green())
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    if edited_countries:
        embed.add_field(
            name=f"‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ({len(edited_countries)} ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®)",
            value="\n".join(edited_countries),
            inline=False
        )
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    if failed_countries:
        failed_text = "\n".join([f"- {code}: {reason}" for code, reason in failed_countries])
        embed.add_field(
            name=f"‚ùå ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ({len(failed_countries)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)",
            value=failed_text,
            inline=False
        )
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    country_list = "\n".join([f"- {code}: {COUNTRY_EMOJIS.get(code, '‚ùì')} {COUNTRY_NAMES[code]}" for code in COUNTRIES])
    embed.add_field(
        name="‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô",
        value=country_list,
        inline=False
    )
    
    await ctx.send(embed=embed)

# ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡πÄ‡∏î‡∏¥‡∏°‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®/removecountry)

# ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ

# Slash command ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®
@bot.tree.command(name="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®", description="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô)")
@discord.app_commands.describe(‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•="‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡πÄ‡∏ä‡πà‡∏ô '1 üáπüá≠ ‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡∏ô‡∏î‡πå' (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏ ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)")
async def edit_country_slash(interaction: discord.Interaction, ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: str = None):
    """Slash command to edit countries' name and emojis (Admin only)"""
    # Check if user is admin
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô", ephemeral=True)
        return
    
    await interaction.response.defer(ephemeral=False)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• is None:
        # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ
        country_list = "\n".join([f"- {code}: {COUNTRY_EMOJIS.get(code, '‚ùì')} {COUNTRY_NAMES[code]}" for code in COUNTRIES])
        
        embed = discord.Embed(
            title="üåè ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
            description="‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á `/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®` ‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö **‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥ ‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®**",
            color=discord.Color.blue()
        )
        
        embed.add_field(
            name="‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô",
            value=country_list,
            inline=False
        )
        
        embed.add_field(
            name="‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á",
            value="```\n/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:1 üáπüá≠ ‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡∏ô‡∏î‡πå```\n```\n/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:2 üå∏ ‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô```\n```\n/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:3 ü¶Ö ‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤```",
            inline=False
        )
        
        await interaction.followup.send(embed=embed)
        return
    
    # ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î (‡∏Å‡∏£‡∏ì‡∏µ‡πÉ‡∏ô slash command ‡∏à‡∏∞‡∏°‡∏µ‡πÅ‡∏Ñ‡πà‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)
    parts = ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•.strip().split(maxsplit=2)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if len(parts) < 2:
        await interaction.followup.send("‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô (‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥/‡∏ä‡∏∑‡πà‡∏≠)")
        return
    
    # ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®, ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥, ‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠
    country_code = parts[0]
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if len(parts) == 2:
        # ‡∏°‡∏µ‡πÅ‡∏Ñ‡πà‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠/‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥
        second_part = parts[1]
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠
        if len(second_part) <= 2 or any(ord(c) > 127 for c in second_part[:2]):
            # ‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥
            emoji = second_part
            name = None
        else:
            # ‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®
            emoji = None
            name = second_part
    else:
        # ‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®, ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥, ‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠
        emoji = parts[1]
        name = parts[2]
    
    # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏ß‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
    old_name = COUNTRY_NAMES.get(country_code, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏¥‡∏°")
    old_emoji = COUNTRY_EMOJIS.get(country_code, "‚ùì")
    
    # ‡∏•‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®
    success = edit_country(country_code, name, emoji)
    
    if success:
        embed = discord.Embed(title="üåè ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®", color=discord.Color.green())
        
        changes = []
        if emoji:
            changes.append(f"‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥: {old_emoji} ‚Üí {emoji}")
        if name:
            changes.append(f"‡∏ä‡∏∑‡πà‡∏≠: {old_name} ‚Üí {name}")
            
        embed.add_field(
            name=f"‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® {country_code} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
            value="\n".join(changes),
            inline=False
        )
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        country_list = "\n".join([f"- {code}: {COUNTRY_EMOJIS.get(code, '‚ùì')} {COUNTRY_NAMES[code]}" for code in COUNTRIES])
        embed.add_field(
            name="‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô",
            value=country_list,
            inline=False
        )
        
        await interaction.followup.send(embed=embed)
    else:
        await interaction.followup.send(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™ `{country_code}`")

# Command to view or change QR code
@bot.command(name="qrcode")
async def qrcode_command(ctx, url: str = None):
    """Command to change or view the QR code URL (Admin only)"""
    # Check if user is admin
    if not ctx.author.guild_permissions.administrator:
        await ctx.send("‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
        return
    
    if url is None:
        # Show current QR code
        current_url = await load_qrcode_url_async()
        embed = discord.Embed(
            title="üì≤ QR Code ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô",
            description="QR Code ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô",
            color=0x4f0099
        )
        embed.set_image(url=current_url)
        embed.add_field(name="URL", value=f"`{current_url}`", inline=False)
        embed.add_field(
            name="‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô QR Code", 
            value="‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á `!qrcode [URL]` ‡πÇ‡∏î‡∏¢‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà [URL] ‡∏î‡πâ‡∏ß‡∏¢‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û QR Code ‡πÉ‡∏´‡∏°‡πà", 
            inline=False
        )
        await ctx.send(embed=embed)
    else:
        # Update QR code URL
        old_url = await load_qrcode_url_async()
        # ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô async ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á MongoDB
        await save_qrcode_to_mongodb(url)
        
        embed = discord.Embed(
            title="‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô QR Code ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
            description="QR Code ‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
            color=0x00ff00
        )
        embed.add_field(name="URL ‡πÄ‡∏î‡∏¥‡∏°", value=f"`{old_url}`", inline=False)
        embed.add_field(name="URL ‡πÉ‡∏´‡∏°‡πà", value=f"`{url}`", inline=False)
        embed.set_image(url=url)
        await ctx.send(embed=embed)

# Slash command to add '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤' placeholders to empty categories
@bot.tree.command(name="‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", description="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤' ‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Admin only)")
async def add_no_product_placeholders_slash(interaction: discord.Interaction):
    """Slash command to add '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤' placeholders to empty categories in all countries (Admin only)"""
    # Check if user has Administrator permissions
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏• (Administrator)", ephemeral=True)
        return
        
    try:
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ placeholder ‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤
        added_count = add_no_product_placeholders()
        
        if added_count > 0:
            await interaction.response.send_message(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤' ‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß {added_count} ‡∏´‡∏°‡∏ß‡∏î")
        else:
            await interaction.response.send_message("‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏°‡∏ß‡∏î‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤ ‡∏ó‡∏∏‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
            
    except Exception as e:
        await interaction.response.send_message(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}", ephemeral=True)

# Slash command to view or change QR code
@bot.tree.command(name="qrcode", description="‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô QR Code (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô)")
async def qrcode_slash(interaction: discord.Interaction, url: str = None):
    """Slash command to change or view the QR code URL (Admin only)"""
    # Check if user is admin
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô", ephemeral=True)
        return
    
    await interaction.response.defer(ephemeral=False)
    
    if url is None:
        # Show current QR code
        current_url = await load_qrcode_url_async()
        embed = discord.Embed(
            title="üì≤ QR Code ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô",
            description="QR Code ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô",
            color=0x4f0099
        )
        embed.set_image(url=current_url)
        embed.add_field(name="URL", value=f"`{current_url}`", inline=False)
        embed.add_field(
            name="‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô QR Code", 
            value="‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á `/qrcode url:[URL]` ‡πÇ‡∏î‡∏¢‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà [URL] ‡∏î‡πâ‡∏ß‡∏¢‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û QR Code ‡πÉ‡∏´‡∏°‡πà", 
            inline=False
        )
        await interaction.followup.send(embed=embed)
    else:
        # Update QR code URL
        old_url = await load_qrcode_url_async()
        # ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô async ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á MongoDB
        await save_qrcode_to_mongodb(url)
        
        embed = discord.Embed(
            title="‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô QR Code ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
            description="QR Code ‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
            color=0x00ff00
        )
        embed.add_field(name="URL ‡πÄ‡∏î‡∏¥‡∏°", value=f"`{old_url}`", inline=False)
        embed.add_field(name="URL ‡πÉ‡∏´‡∏°‡πà", value=f"`{url}`", inline=False)
        embed.set_image(url=url)
        await interaction.followup.send(embed=embed)

# Command to view or change thank you message
@bot.command(name="ty", aliases=["‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì"])
async def ty_command(ctx, *, ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: str = None):
    """Command to change or view the thank you message (Admin only)"""
    # Check if user is admin
    if not ctx.author.guild_permissions.administrator:
        await ctx.send("‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
        return
    
    if ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° is None:
        # Show current thank you message
        current_message = load_thank_you_message()
        embed = discord.Embed(
            title="üíå ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô",
            description=f"{current_message}",
            color=0x4f0099
        )
        embed.add_field(
            name="‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì", 
            value="‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á `!‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì [‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°]` ‡πÇ‡∏î‡∏¢‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà [‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°] ‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡∏°‡πà", 
            inline=False
        )
        await ctx.send(embed=embed)
    else:
        # Update thank you message
        old_message = load_thank_you_message()
        save_thank_you_message(‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°)
        
        embed = discord.Embed(
            title="‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
            color=0x00ff00
        )
        embed.add_field(name="‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°", value=f"{old_message}", inline=False)
        embed.add_field(name="‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà", value=f"{‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°}", inline=False)
        await ctx.send(embed=embed)

# Slash command to view or change thank you message
@bot.tree.command(name="ty", description="‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô)")
@discord.app_commands.describe(‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°="‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡∏°‡πà")
async def ty_slash(interaction: discord.Interaction, ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: str = None):
    """Slash command to change or view the thank you message (Admin only)"""
    # Check if user is admin
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô", ephemeral=True)
        return
    
    await interaction.response.defer(ephemeral=False)
    
    if ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° is None:
        # Show current thank you message
        current_message = load_thank_you_message()
        embed = discord.Embed(
            title="üíå ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô",
            description=f"{current_message}",
            color=0x4f0099
        )
        embed.add_field(
            name="‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì", 
            value="‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á `/ty ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°:[‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°]` ‡πÇ‡∏î‡∏¢‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà [‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°] ‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡∏°‡πà", 
            inline=False
        )
        await interaction.followup.send(embed=embed)
    else:
        # Update thank you message
        old_message = load_thank_you_message()
        save_thank_you_message(‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°)
        
        embed = discord.Embed(
            title="‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
            color=0x00ff00
        )
        embed.add_field(name="‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°", value=f"{old_message}", inline=False)
        embed.add_field(name="‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà", value=f"{‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°}", inline=False)
        await interaction.followup.send(embed=embed)

# ======================================
# ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MongoDB
# ======================================

@bot.command(name="upload", aliases=["‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î", "‡∏≠‡∏±‡∏û"])
async def upload_command(ctx):
    """‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á MongoDB"""
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
    if not ctx.author.guild_permissions.administrator:
        await ctx.send("‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
        return
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î
    processing_message = await ctx.send("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á MongoDB...")
    
    try:
        from db_operations import (save_products_to_mongodb, save_countries_to_mongodb, 
                                  save_categories_to_mongodb, save_qrcode_to_mongodb,
                                  save_thank_you_message_to_mongodb)
        from mongodb_config import client
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB
        if client is None:
            await processing_message.edit(content="‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö MongoDB ‡πÑ‡∏î‡πâ")
            return
        
        # 1. ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®
        countries_status = "‚úÖ"
        try:
            countries_data = {
                "countries": COUNTRIES,
                "country_names": COUNTRY_NAMES,
                "country_emojis": COUNTRY_EMOJIS,
                "country_codes": COUNTRY_CODES
            }
            await save_countries_to_mongodb(countries_data)
        except Exception as e:
            countries_status = f"‚ùå ({str(e)[:30]}...)"
        
        # 2. ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
        categories_status = "‚úÖ"
        try:
            categories_data = {
                "category_names": CATEGORY_NAMES,
                "category_emojis": CATEGORY_EMOJIS
            }
            await save_categories_to_mongodb(categories_data)
        except Exception as e:
            categories_status = f"‚ùå ({str(e)[:30]}...)"
        
        # 3. ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        products_status = "‚úÖ"
        products_count = 0
        try:
            # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå categories
            all_products = []
            categories_dir = SCRIPT_DIR / "categories"
            
            if categories_dir.exists():
                for country_dir in sorted(categories_dir.iterdir()):
                    if country_dir.is_dir():
                        country_code = country_dir.name
                        for category_file in sorted(country_dir.iterdir()):
                            if category_file.is_file() and category_file.suffix == '.json':
                                category_code = category_file.stem
                                with open(category_file, "r", encoding="utf-8") as f:
                                    category_products = json.load(f)
                                    for product in category_products:
                                        if isinstance(product, dict) and "name" in product:
                                            product["country"] = country_code
                                            product["category"] = category_code
                                            all_products.append(product)
            
            products_count = len(all_products)
            if products_count > 0:
                await save_products_to_mongodb(all_products)
            else:
                products_status = "‚ö†Ô∏è (‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤)"
        except Exception as e:
            products_status = f"‚ùå ({str(e)[:30]}...)"
        
        # 4. ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î QR Code URL
        qrcode_status = "‚úÖ"
        try:
            qr_code_url = ""
            try:
                with open(QRCODE_CONFIG_FILE, "r", encoding="utf-8") as f:
                    qr_code_url = json.load(f).get("url", "")
            except:
                pass
            
            if qr_code_url:
                await save_qrcode_to_mongodb(qr_code_url)
            else:
                qrcode_status = "‚ö†Ô∏è (‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• QR Code)"
        except Exception as e:
            qrcode_status = f"‚ùå ({str(e)[:30]}...)"
        
        # 5. ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì
        thank_you_status = "‚úÖ"
        try:
            thank_you_message = load_thank_you_message()
            if thank_you_message:
                await save_thank_you_message_to_mongodb(thank_you_message)
            else:
                thank_you_status = "‚ö†Ô∏è (‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì)"
        except Exception as e:
            thank_you_status = f"‚ùå ({str(e)[:30]}...)"
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á embed ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        embed = discord.Embed(
            title="üîÑ ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á MongoDB",
            description="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MongoDB",
            color=discord.Color.green()
        )
        
        embed.add_field(name="üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®", value=countries_status, inline=True)
        embed.add_field(name="üìÇ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà", value=categories_status, inline=True)
        embed.add_field(name="üõí ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", value=f"{products_status} ({products_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)", inline=True)
        embed.add_field(name="üíµ QR Code", value=qrcode_status, inline=True)
        embed.add_field(name="üí¨ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì", value=thank_you_status, inline=True)
        
        embed.set_footer(text=f"‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        await processing_message.edit(content=None, embed=embed)
        
    except Exception as e:
        await processing_message.edit(content=f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {str(e)[:100]}...")

@bot.command(name="download", aliases=["‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î", "‡πÇ‡∏´‡∏•‡∏î"])
async def download_command(ctx):
    """‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å MongoDB ‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå JSON"""
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
    if not ctx.author.guild_permissions.administrator:
        await ctx.send("‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
        return
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
    processing_message = await ctx.send("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å MongoDB...")
    
    try:
        from db_operations import (load_products_async, load_countries, load_categories,
                                 load_qrcode_url_async, load_thank_you_message_async)
        from mongodb_config import client
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB
        if client is None:
            await processing_message.edit(content="‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö MongoDB ‡πÑ‡∏î‡πâ")
            return
        
        # 1. ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®
        countries_status = "‚úÖ"
        try:
            countries_data = await load_countries()
            if countries_data:
                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÇ‡∏Å‡∏•‡∏ö‡∏≠‡∏•
                global COUNTRIES, COUNTRY_NAMES, COUNTRY_EMOJIS, COUNTRY_CODES
                if "countries" in countries_data:
                    COUNTRIES = countries_data["countries"]
                if "country_names" in countries_data:
                    COUNTRY_NAMES = countries_data["country_names"]
                if "country_emojis" in countries_data:
                    COUNTRY_EMOJIS = countries_data["country_emojis"]
                if "country_codes" in countries_data:
                    COUNTRY_CODES = countries_data["country_codes"]
                
                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
                with open(COUNTRIES_FILE, "w", encoding="utf-8") as f:
                    json.dump(countries_data, f, ensure_ascii=False, indent=2)
            else:
                countries_status = "‚ö†Ô∏è (‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)"
        except Exception as e:
            countries_status = f"‚ùå ({str(e)[:30]}...)"
        
        # 2. ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
        categories_status = "‚úÖ"
        try:
            categories_data = await load_categories()
            if categories_data:
                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÇ‡∏Å‡∏•‡∏ö‡∏≠‡∏•
                global CATEGORY_NAMES, CATEGORY_EMOJIS
                if "category_names" in categories_data:
                    CATEGORY_NAMES = categories_data["category_names"]
                if "category_emojis" in categories_data:
                    CATEGORY_EMOJIS = categories_data["category_emojis"]
                
                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
                with open(SCRIPT_DIR / "categories_config.json", "w", encoding="utf-8") as f:
                    json.dump(categories_data, f, ensure_ascii=False, indent=2)
            else:
                categories_status = "‚ö†Ô∏è (‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)"
        except Exception as e:
            categories_status = f"‚ùå ({str(e)[:30]}...)"
        
        # 3. ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        products_status = "‚úÖ"
        products_count = 0
        try:
            all_products = await load_products_async()
            if all_products:
                products_count = len(all_products)
                
                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå products.json
                with open(PRODUCTS_FILE, "w", encoding="utf-8") as f:
                    json.dump(all_products, f, ensure_ascii=False, indent=2)
                
                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå categories ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏¢‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
                categorized_products = {}
                
                for product in all_products:
                    country = product.get("country", "1")
                    category = product.get("category", "money")
                    
                    if country not in categorized_products:
                        categorized_products[country] = {}
                    
                    if category not in categorized_products[country]:
                        categorized_products[country][category] = []
                    
                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ country ‡πÅ‡∏•‡∏∞ category
                    product_copy = product.copy()
                    if "country" in product_copy:
                        del product_copy["country"]
                    if "category" in product_copy:
                        del product_copy["category"]
                    if "_id" in product_copy:
                        del product_copy["_id"]
                    
                    categorized_products[country][category].append(product_copy)
                
                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
                categories_dir = SCRIPT_DIR / "categories"
                for country, categories in categorized_products.items():
                    country_dir = categories_dir / country
                    country_dir.mkdir(parents=True, exist_ok=True)
                    
                    for category, products in categories.items():
                        category_file = country_dir / f"{category}.json"
                        with open(category_file, "w", encoding="utf-8") as f:
                            json.dump(products, f, ensure_ascii=False, indent=2)
            else:
                products_status = "‚ö†Ô∏è (‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)"
        except Exception as e:
            products_status = f"‚ùå ({str(e)[:30]}...)"
        
        # 4. ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î QR Code URL
        qrcode_status = "‚úÖ"
        try:
            qrcode_url = await load_qrcode_url_async()
            if qrcode_url:
                with open(QRCODE_CONFIG_FILE, "w", encoding="utf-8") as f:
                    json.dump({"url": qrcode_url}, f, ensure_ascii=False, indent=2)
            else:
                qrcode_status = "‚ö†Ô∏è (‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)"
        except Exception as e:
            qrcode_status = f"‚ùå ({str(e)[:30]}...)"
        
        # 5. ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì
        thank_you_status = "‚úÖ"
        try:
            thank_you_message = await load_thank_you_message_async()
            if thank_you_message:
                with open(SCRIPT_DIR / "thank_you_config.json", "w", encoding="utf-8") as f:
                    json.dump({"message": thank_you_message}, f, ensure_ascii=False, indent=2)
            else:
                thank_you_status = "‚ö†Ô∏è (‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)"
        except Exception as e:
            thank_you_status = f"‚ùå ({str(e)[:30]}...)"
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á embed ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        embed = discord.Embed(
            title="üîÑ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å MongoDB",
            description="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MongoDB",
            color=discord.Color.blue()
        )
        
        embed.add_field(name="üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®", value=countries_status, inline=True)
        embed.add_field(name="üìÇ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà", value=categories_status, inline=True)
        embed.add_field(name="üõí ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", value=f"{products_status} ({products_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)", inline=True)
        embed.add_field(name="üíµ QR Code", value=qrcode_status, inline=True)
        embed.add_field(name="üí¨ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì", value=thank_you_status, inline=True)
        
        embed.set_footer(text=f"‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        await processing_message.edit(content=None, embed=embed)
        
    except Exception as e:
        await processing_message.edit(content=f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {str(e)[:100]}...")

# Run the bot
if __name__ == "__main__":
    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÉ‡∏ô‡πÄ‡∏ò‡∏£‡∏î‡πÅ‡∏¢‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Render.com
    start_server_in_thread()
    
    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó
    bot.run(TOKEN)
